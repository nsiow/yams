{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to yams yams is a Go library, server, and CLI providing foundational capabilities to simulate access for AWS IAM policies. It was designed for accuracy, security, and speed to meet the needs of cloud security teams working in environments both large and complex. The source code for yams is available on GitHub .","title":"About"},{"location":"#welcome-to-yams","text":"yams is a Go library, server, and CLI providing foundational capabilities to simulate access for AWS IAM policies. It was designed for accuracy, security, and speed to meet the needs of cloud security teams working in environments both large and complex. The source code for yams is available on GitHub .","title":"Welcome to yams"},{"location":"api/","text":"API Reference The following documentation provides examples of integrating with the HTTP API for yams . Healthcheck API GET /api/v1/healthcheck curl ${YAMS_SERVER_ADDRESS}/api/v1/healthcheck OK Status API GET /api/v1/status curl ${YAMS_SERVER_ADDRESS}/api/v1/status { \"accounts\": 4, \"entities\": 1448, \"groups\": 0, \"policies\": 1371, \"principals\": 20, \"resources\": 53, \"sources\": [ { \"source\": \"testdata/real-world/awsconfig.jsonl\", \"updated\": \"2025-03-15T15:04:35.173468943-07:00\" }, { \"source\": \"testdata/real-world/org.jsonl\", \"updated\": \"2025-03-15T15:04:35.173687682-07:00\" } ] } Actions API List GET /api/v1/actions curl ${YAMS_SERVER_ADDRESS}/api/v1/actions [ \"a2c:GetContainerizationJobDetails\", \"a2c:GetDeploymentJobDetails\", \"a2c:StartContainerizationJob\", \"a2c:StartDeploymentJob\", \"a4b:ApproveSkill\", \"a4b:AssociateContactWithAddressBook\", \"a4b:AssociateDeviceWithNetworkProfile\", \"a4b:AssociateDeviceWithRoom\", \"a4b:AssociateSkillGroupWithRoom\", ... ] Lookup GET /api/v1/actions/{key...} curl ${YAMS_SERVER_ADDRESS}/api/v1/actions/dynamodb.putitem { \"Name\": \"PutItem\", \"Service\": \"dynamodb\", \"ActionConditionKeys\": [ \"dynamodb:attributes\", \"dynamodb:enclosingoperation\", \"dynamodb:leadingkeys\", \"dynamodb:returnconsumedcapacity\", \"dynamodb:returnvalues\" ], \"ResolvedResources\": [ { \"Name\": \"table\", \"ARNFormats\": [ \"arn:*:dynamodb:*:*:table/*\" ], \"ConditionKeys\": [ \"aws:resourcetag\" ] } ] } Search GET /api/v1/actions/search/{search...} curl ${YAMS_SERVER_ADDRESS}/api/v1/actions/search/networkinterface [ \"ec2:AttachNetworkInterface\", \"ec2:CreateNetworkInterface\", \"ec2:CreateNetworkInterfacePermission\", \"ec2:DeleteNetworkInterface\", \"ec2:DeleteNetworkInterfacePermission\", \"ec2:DescribeNetworkInterfaceAttribute\", \"ec2:DescribeNetworkInterfacePermissions\", \"ec2:DescribeNetworkInterfaces\", \"ec2:DetachNetworkInterface\", ... ] Principals API List GET /api/v1/principals curl ${YAMS_SERVER_ADDRESS}/api/v1/principals [ \"arn:aws:iam::213308312933:role/LionRole\", \"arn:aws:iam::213308312933:role/MouseRole\", \"arn:aws:iam::213308312933:role/PandaRole\", \"arn:aws:iam::213308312933:user/CatUser\", \"arn:aws:iam::213308312933:user/DogUser\", \"arn:aws:iam::213308312933:user/FishUser\", \"arn:aws:iam::255082776537:role/BurgerRole\", \"arn:aws:iam::255082776537:role/NoodleRole\", \"arn:aws:iam::255082776537:role/PizzaRole\", ... ] Lookup GET /api/v1/principals/{key...} curl ${YAMS_SERVER_ADDRESS}/api/v1/principals/arn:aws:iam::213308312933:user/CatUser { \"Type\": \"AWS::IAM::User\", \"AccountId\": \"213308312933\", \"Name\": \"CatUser\", \"Arn\": \"arn:aws:iam::213308312933:user/CatUser\", ... } Search GET /api/v1/principals/search/{search...} curl ${YAMS_SERVER_ADDRESS}/api/v1/principals/search/cat [ \"arn:aws:iam::213308312933:user/CatUser\" ] Resources API List GET /api/v1/resources curl ${YAMS_SERVER_ADDRESS}/api/v1/resources [ \"arn:aws:dynamodb:us-east-1:213308312933:table/ElephantTable\", \"arn:aws:dynamodb:us-east-1:255082776537:table/TacoTable\", \"arn:aws:dynamodb:us-east-1:777583092761:table/NavyTable\", \"arn:aws:dynamodb:us-east-1:777583092761:table/OrangeTable\", \"arn:aws:iam::213308312933:policy/yams-test-infra-DogPolicy-pX0mgCedLaeo\", \"arn:aws:iam::213308312933:policy/yams-test-infra-LlamaBoundary-mvVoctsE53pG\", \"arn:aws:iam::213308312933:role/LionRole\", \"arn:aws:iam::213308312933:role/MouseRole\", \"arn:aws:iam::213308312933:role/PandaRole\", ... ] Lookup GET /api/v1/resources/{key...} curl ${YAMS_SERVER_ADDRESS}/api/v1/resources/arn:aws:s3:::yams-cyan { \"Type\": \"AWS::S3::Bucket\", \"AccountId\": \"777583092761\", \"Region\": \"us-east-1\", \"Name\": \"yams-cyan\", \"Arn\": \"arn:aws:s3:::yams-cyan\", \"Policy\": { \"Version\": \"2012-10-17\", \"Id\": \"\", \"Statement\": [ { \"Sid\": \"\", \"Effect\": \"Deny\", \"Principal\": \"*\", \"Action\": [ \"s3:listbucket\", \"s3:getobject\" ], \"Resource\": [ \"arn:aws:s3:::yams-cyan\", \"arn:aws:s3:::yams-cyan/*\" ], \"Condition\": { \"StringNotEquals\": { \"aws:PrincipalTag/Color\": \"Blue\" } } } ] }, ... } Search GET /api/v1/resources/search/{search...} curl ${YAMS_SERVER_ADDRESS}/api/v1/resources/search/s3 [ \"arn:aws:s3:::banana-bucket-255082776537\", \"arn:aws:s3:::crocodile-bucket-213308312933\", \"arn:aws:s3:::peach-bucket-777583092761\", \"arn:aws:s3:::yams-bear\", \"arn:aws:s3:::yams-cyan\", \"arn:aws:s3:::yams-green\", \"arn:aws:s3:::yams-magenta\" ] Policies API List GET /api/v1/policies curl ${YAMS_SERVER_ADDRESS}/api/v1/policies [ \"arn:aws:iam::213308312933:policy/yams-test-infra-DogPolicy-pX0mgCedLaeo\", \"arn:aws:iam::213308312933:policy/yams-test-infra-LlamaBoundary-mvVoctsE53pG\", \"arn:aws:iam::255082776537:policy/yams-test-infra-CupcakeBoundary-udxeJjTH6ebJ\", \"arn:aws:iam::255082776537:policy/yams-test-infra-SaladPolicy-opE0edVZrSWR\", \"arn:aws:iam::255082776537:policy/yams-test-infra-SoupPolicy-65QKm40EPh1y\", \"arn:aws:iam::777583092761:policy/yams-test-infra-GreyPolicy-gLf7j3ZwJYBm\", \"arn:aws:iam::777583092761:policy/yams-test-infra-MustardBoundary-47JW6znulEXt\", \"arn:aws:iam::777583092761:policy/yams-test-infra-PinkBoundary-xuINwerkCuZ3\", \"arn:aws:iam::aws:policy/AIOpsAssistantPolicy\", ... ] Lookup GET /api/v1/policies/{key...} curl ${YAMS_SERVER_ADDRESS}/api/v1/policies/arn:aws:iam::213308312933:policy/yams-test-infra-DogPolicy-pX0mgCedLaeo { \"Type\": \"AWS::IAM::Policy\", \"AccountId\": \"213308312933\", \"Arn\": \"arn:aws:iam::213308312933:policy/yams-test-infra-DogPolicy-pX0mgCedLaeo\", \"Name\": \"yams-test-infra-DogPolicy-pX0mgCedLaeo\", \"Policy\": { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": \"*\", \"Resource\": \"*\" } ] } } Search GET /api/v1/policies/search/{search...} curl ${YAMS_SERVER_ADDRESS}/api/v1/policies/search/test [ \"arn:aws:iam::213308312933:policy/yams-test-infra-DogPolicy-pX0mgCedLaeo\", \"arn:aws:iam::213308312933:policy/yams-test-infra-LlamaBoundary-mvVoctsE53pG\", \"arn:aws:iam::255082776537:policy/yams-test-infra-CupcakeBoundary-udxeJjTH6ebJ\", \"arn:aws:iam::255082776537:policy/yams-test-infra-SaladPolicy-opE0edVZrSWR\", \"arn:aws:iam::255082776537:policy/yams-test-infra-SoupPolicy-65QKm40EPh1y\", \"arn:aws:iam::777583092761:policy/yams-test-infra-GreyPolicy-gLf7j3ZwJYBm\", \"arn:aws:iam::777583092761:policy/yams-test-infra-MustardBoundary-47JW6znulEXt\", \"arn:aws:iam::777583092761:policy/yams-test-infra-PinkBoundary-xuINwerkCuZ3\", \"arn:aws:iam::aws:policy/AWSIoTDeviceTesterForFreeRTOSFullAccess\", ... ] Accounts API List GET /api/v1/accounts curl ${YAMS_SERVER_ADDRESS}/api/v1/accounts [ \"213308312933\", \"255082776537\", \"777583092761\", \"810970970902\" ] Lookup GET /api/v1/accounts/{key...} curl ${YAMS_SERVER_ADDRESS}/api/v1/accounts/213308312933 { \"Id\": \"213308312933\", \"Name\": \"yams1\", \"OrgId\": \"o-9hmw0uhxs4\", \"OrgPaths\": [ \"o-9hmw0uhxs4/r-m4x4/\", \"o-9hmw0uhxs4/r-m4x4/ou-m4x4-onrzr6t1/\" ], \"OrgNodes\": ... } Search GET /api/v1/accounts/search/{search...} curl ${YAMS_SERVER_ADDRESS}/api/v1/accounts/search/213 [ \"213308312933\" ] Basic Simulation POST /api/v1/sim curl -X POST ${YAMS_SERVER_ADDRESS}/api/v1/sim -d '{ \"principal\": \"arn:aws:iam::777583092761:role/RedRole\", \"action\": \"sns:publish\", \"resource\": \"arn:aws:sns:us-east-1:777583092761:PurpleTopic\" }' { \"result\": \"DENY\", \"principal\": \"arn:aws:iam::777583092761:role/RedRole\", \"action\": \"sns:Publish\", \"resource\": \"arn:aws:sns:us-east-1:777583092761:PurpleTopic\" } Extended Simulation Which Principals? POST /api/v1/sim/whichPrincipals curl -X POST ${YAMS_SERVER_ADDRESS}/api/v1/sim/whichPrincipals -d '{ \"action\": \"sns:publish\", \"resource\": \"arn:aws:sns:us-east-1:777583092761:PurpleTopic\" }' [ \"arn:aws:iam::777583092761:role/BlueRole\" ] Which Resources? POST /api/v1/sim/whichResources curl -X POST ${YAMS_SERVER_ADDRESS}/api/v1/sim/whichResources -d '{ \"principal\": \"arn:aws:iam::777583092761:role/BlueRole\", \"action\": \"sns:publish\" }' [ \"arn:aws:sns:us-east-1:213308312933:LemurTopic\", \"arn:aws:sns:us-east-1:777583092761:PurpleTopic\" ] Which Actions? POST /api/v1/sim/whichActions curl -X POST ${YAMS_SERVER_ADDRESS}/api/v1/sim/whichActions -d '{ \"principal\": \"arn:aws:iam::777583092761:role/BlueRole\", \"resource\": \"arn:aws:sns:us-east-1:777583092761:PurpleTopic\" }' [ \"sns:AddPermission\", \"sns:ConfirmSubscription\", \"sns:CreateTopic\", \"sns:DeleteTopic\", \"sns:GetDataProtectionPolicy\", \"sns:GetTopicAttributes\", \"sns:ListSubscriptionsByTopic\", \"sns:ListTagsForResource\", \"sns:Publish\", \"sns:PutDataProtectionPolicy\", \"sns:RemovePermission\", \"sns:SetTopicAttributes\", \"sns:Subscribe\", \"sns:TagResource\", \"sns:UntagResource\" ] Explain & Trace POST /api/v1/sim curl -X POST ${YAMS_SERVER_ADDRESS}/api/v1/sim -d '{ \"principal\": \"arn:aws:iam::777583092761:role/RedRole\", \"action\": \"s3.GetObject\", \"resource\": \"arn:aws:s3:::yams-cyan/foo.txt\", \"explain\": true }' { \"result\": \"DENY\", \"principal\": \"arn:aws:iam::777583092761:role/RedRole\", \"action\": \"s3:GetObject\", \"resource\": \"arn:aws:s3:::yams-cyan/foo.txt\", \"explain\": [ \"[explicit deny] in resource policy\" ] } Overlays POST /api/v1/sim curl -X POST ${YAMS_SERVER_ADDRESS}/api/v1/sim -d '{ \"principal\": \"arn:aws:iam::777583092761:role/RedRole\", \"action\": \"s3.GetObject\", \"resource\": \"arn:aws:s3:::yams-cyan/foo.txt\", \"overlay\": { \"principals\": [ { \"Type\": \"AWS::IAM::Role\", \"AccountId\": \"777583092761\", \"Name\": \"RedRole\", \"Arn\": \"arn:aws:iam::777583092761:role/RedRole\", \"Tags\": [ { \"Key\": \"is-yams-test-resource\", \"Value\": \"true\" }, { \"Key\": \"Color\", \"Value\": \"Blue\" } ], \"InlinePolicies\": [ { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": \"sts:assumerole\", \"Resource\": \"*\" } ] }, { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Deny\", \"Action\": \"dynamodb:*\", \"Resource\": \"*\" } ] }, { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": \"s3:ListAllMyBuckets\", \"Resource\": \"*\" }, { \"Effect\": \"Allow\", \"Action\": [ \"s3:GetObject\", \"s3:PutObject\", \"s3:DeleteObject\", \"s3:ListBucket\" ], \"Resource\": [ \"arn:aws:s3:::yams-*\", \"arn:aws:s3:::yams-*/*\" ] } ] } ], \"AttachedPolicies\": null, \"Groups\": null } ] } }' { \"result\": \"ALLOW\", \"principal\": \"arn:aws:iam::777583092761:role/RedRole\", \"action\": \"s3:GetObject\", \"resource\": \"arn:aws:s3:::yams-cyan/foo.txt\" }","title":"API Reference"},{"location":"api/#api-reference","text":"The following documentation provides examples of integrating with the HTTP API for yams .","title":"API Reference"},{"location":"api/#healthcheck-api","text":"GET /api/v1/healthcheck curl ${YAMS_SERVER_ADDRESS}/api/v1/healthcheck OK","title":"Healthcheck API"},{"location":"api/#status-api","text":"GET /api/v1/status curl ${YAMS_SERVER_ADDRESS}/api/v1/status { \"accounts\": 4, \"entities\": 1448, \"groups\": 0, \"policies\": 1371, \"principals\": 20, \"resources\": 53, \"sources\": [ { \"source\": \"testdata/real-world/awsconfig.jsonl\", \"updated\": \"2025-03-15T15:04:35.173468943-07:00\" }, { \"source\": \"testdata/real-world/org.jsonl\", \"updated\": \"2025-03-15T15:04:35.173687682-07:00\" } ] }","title":"Status API"},{"location":"api/#actions-api","text":"List GET /api/v1/actions curl ${YAMS_SERVER_ADDRESS}/api/v1/actions [ \"a2c:GetContainerizationJobDetails\", \"a2c:GetDeploymentJobDetails\", \"a2c:StartContainerizationJob\", \"a2c:StartDeploymentJob\", \"a4b:ApproveSkill\", \"a4b:AssociateContactWithAddressBook\", \"a4b:AssociateDeviceWithNetworkProfile\", \"a4b:AssociateDeviceWithRoom\", \"a4b:AssociateSkillGroupWithRoom\", ... ] Lookup GET /api/v1/actions/{key...} curl ${YAMS_SERVER_ADDRESS}/api/v1/actions/dynamodb.putitem { \"Name\": \"PutItem\", \"Service\": \"dynamodb\", \"ActionConditionKeys\": [ \"dynamodb:attributes\", \"dynamodb:enclosingoperation\", \"dynamodb:leadingkeys\", \"dynamodb:returnconsumedcapacity\", \"dynamodb:returnvalues\" ], \"ResolvedResources\": [ { \"Name\": \"table\", \"ARNFormats\": [ \"arn:*:dynamodb:*:*:table/*\" ], \"ConditionKeys\": [ \"aws:resourcetag\" ] } ] } Search GET /api/v1/actions/search/{search...} curl ${YAMS_SERVER_ADDRESS}/api/v1/actions/search/networkinterface [ \"ec2:AttachNetworkInterface\", \"ec2:CreateNetworkInterface\", \"ec2:CreateNetworkInterfacePermission\", \"ec2:DeleteNetworkInterface\", \"ec2:DeleteNetworkInterfacePermission\", \"ec2:DescribeNetworkInterfaceAttribute\", \"ec2:DescribeNetworkInterfacePermissions\", \"ec2:DescribeNetworkInterfaces\", \"ec2:DetachNetworkInterface\", ... ]","title":"Actions API"},{"location":"api/#principals-api","text":"List GET /api/v1/principals curl ${YAMS_SERVER_ADDRESS}/api/v1/principals [ \"arn:aws:iam::213308312933:role/LionRole\", \"arn:aws:iam::213308312933:role/MouseRole\", \"arn:aws:iam::213308312933:role/PandaRole\", \"arn:aws:iam::213308312933:user/CatUser\", \"arn:aws:iam::213308312933:user/DogUser\", \"arn:aws:iam::213308312933:user/FishUser\", \"arn:aws:iam::255082776537:role/BurgerRole\", \"arn:aws:iam::255082776537:role/NoodleRole\", \"arn:aws:iam::255082776537:role/PizzaRole\", ... ] Lookup GET /api/v1/principals/{key...} curl ${YAMS_SERVER_ADDRESS}/api/v1/principals/arn:aws:iam::213308312933:user/CatUser { \"Type\": \"AWS::IAM::User\", \"AccountId\": \"213308312933\", \"Name\": \"CatUser\", \"Arn\": \"arn:aws:iam::213308312933:user/CatUser\", ... } Search GET /api/v1/principals/search/{search...} curl ${YAMS_SERVER_ADDRESS}/api/v1/principals/search/cat [ \"arn:aws:iam::213308312933:user/CatUser\" ]","title":"Principals API"},{"location":"api/#resources-api","text":"List GET /api/v1/resources curl ${YAMS_SERVER_ADDRESS}/api/v1/resources [ \"arn:aws:dynamodb:us-east-1:213308312933:table/ElephantTable\", \"arn:aws:dynamodb:us-east-1:255082776537:table/TacoTable\", \"arn:aws:dynamodb:us-east-1:777583092761:table/NavyTable\", \"arn:aws:dynamodb:us-east-1:777583092761:table/OrangeTable\", \"arn:aws:iam::213308312933:policy/yams-test-infra-DogPolicy-pX0mgCedLaeo\", \"arn:aws:iam::213308312933:policy/yams-test-infra-LlamaBoundary-mvVoctsE53pG\", \"arn:aws:iam::213308312933:role/LionRole\", \"arn:aws:iam::213308312933:role/MouseRole\", \"arn:aws:iam::213308312933:role/PandaRole\", ... ] Lookup GET /api/v1/resources/{key...} curl ${YAMS_SERVER_ADDRESS}/api/v1/resources/arn:aws:s3:::yams-cyan { \"Type\": \"AWS::S3::Bucket\", \"AccountId\": \"777583092761\", \"Region\": \"us-east-1\", \"Name\": \"yams-cyan\", \"Arn\": \"arn:aws:s3:::yams-cyan\", \"Policy\": { \"Version\": \"2012-10-17\", \"Id\": \"\", \"Statement\": [ { \"Sid\": \"\", \"Effect\": \"Deny\", \"Principal\": \"*\", \"Action\": [ \"s3:listbucket\", \"s3:getobject\" ], \"Resource\": [ \"arn:aws:s3:::yams-cyan\", \"arn:aws:s3:::yams-cyan/*\" ], \"Condition\": { \"StringNotEquals\": { \"aws:PrincipalTag/Color\": \"Blue\" } } } ] }, ... } Search GET /api/v1/resources/search/{search...} curl ${YAMS_SERVER_ADDRESS}/api/v1/resources/search/s3 [ \"arn:aws:s3:::banana-bucket-255082776537\", \"arn:aws:s3:::crocodile-bucket-213308312933\", \"arn:aws:s3:::peach-bucket-777583092761\", \"arn:aws:s3:::yams-bear\", \"arn:aws:s3:::yams-cyan\", \"arn:aws:s3:::yams-green\", \"arn:aws:s3:::yams-magenta\" ]","title":"Resources API"},{"location":"api/#policies-api","text":"List GET /api/v1/policies curl ${YAMS_SERVER_ADDRESS}/api/v1/policies [ \"arn:aws:iam::213308312933:policy/yams-test-infra-DogPolicy-pX0mgCedLaeo\", \"arn:aws:iam::213308312933:policy/yams-test-infra-LlamaBoundary-mvVoctsE53pG\", \"arn:aws:iam::255082776537:policy/yams-test-infra-CupcakeBoundary-udxeJjTH6ebJ\", \"arn:aws:iam::255082776537:policy/yams-test-infra-SaladPolicy-opE0edVZrSWR\", \"arn:aws:iam::255082776537:policy/yams-test-infra-SoupPolicy-65QKm40EPh1y\", \"arn:aws:iam::777583092761:policy/yams-test-infra-GreyPolicy-gLf7j3ZwJYBm\", \"arn:aws:iam::777583092761:policy/yams-test-infra-MustardBoundary-47JW6znulEXt\", \"arn:aws:iam::777583092761:policy/yams-test-infra-PinkBoundary-xuINwerkCuZ3\", \"arn:aws:iam::aws:policy/AIOpsAssistantPolicy\", ... ] Lookup GET /api/v1/policies/{key...} curl ${YAMS_SERVER_ADDRESS}/api/v1/policies/arn:aws:iam::213308312933:policy/yams-test-infra-DogPolicy-pX0mgCedLaeo { \"Type\": \"AWS::IAM::Policy\", \"AccountId\": \"213308312933\", \"Arn\": \"arn:aws:iam::213308312933:policy/yams-test-infra-DogPolicy-pX0mgCedLaeo\", \"Name\": \"yams-test-infra-DogPolicy-pX0mgCedLaeo\", \"Policy\": { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": \"*\", \"Resource\": \"*\" } ] } } Search GET /api/v1/policies/search/{search...} curl ${YAMS_SERVER_ADDRESS}/api/v1/policies/search/test [ \"arn:aws:iam::213308312933:policy/yams-test-infra-DogPolicy-pX0mgCedLaeo\", \"arn:aws:iam::213308312933:policy/yams-test-infra-LlamaBoundary-mvVoctsE53pG\", \"arn:aws:iam::255082776537:policy/yams-test-infra-CupcakeBoundary-udxeJjTH6ebJ\", \"arn:aws:iam::255082776537:policy/yams-test-infra-SaladPolicy-opE0edVZrSWR\", \"arn:aws:iam::255082776537:policy/yams-test-infra-SoupPolicy-65QKm40EPh1y\", \"arn:aws:iam::777583092761:policy/yams-test-infra-GreyPolicy-gLf7j3ZwJYBm\", \"arn:aws:iam::777583092761:policy/yams-test-infra-MustardBoundary-47JW6znulEXt\", \"arn:aws:iam::777583092761:policy/yams-test-infra-PinkBoundary-xuINwerkCuZ3\", \"arn:aws:iam::aws:policy/AWSIoTDeviceTesterForFreeRTOSFullAccess\", ... ]","title":"Policies API"},{"location":"api/#accounts-api","text":"List GET /api/v1/accounts curl ${YAMS_SERVER_ADDRESS}/api/v1/accounts [ \"213308312933\", \"255082776537\", \"777583092761\", \"810970970902\" ] Lookup GET /api/v1/accounts/{key...} curl ${YAMS_SERVER_ADDRESS}/api/v1/accounts/213308312933 { \"Id\": \"213308312933\", \"Name\": \"yams1\", \"OrgId\": \"o-9hmw0uhxs4\", \"OrgPaths\": [ \"o-9hmw0uhxs4/r-m4x4/\", \"o-9hmw0uhxs4/r-m4x4/ou-m4x4-onrzr6t1/\" ], \"OrgNodes\": ... } Search GET /api/v1/accounts/search/{search...} curl ${YAMS_SERVER_ADDRESS}/api/v1/accounts/search/213 [ \"213308312933\" ]","title":"Accounts API"},{"location":"api/#basic-simulation","text":"POST /api/v1/sim curl -X POST ${YAMS_SERVER_ADDRESS}/api/v1/sim -d '{ \"principal\": \"arn:aws:iam::777583092761:role/RedRole\", \"action\": \"sns:publish\", \"resource\": \"arn:aws:sns:us-east-1:777583092761:PurpleTopic\" }' { \"result\": \"DENY\", \"principal\": \"arn:aws:iam::777583092761:role/RedRole\", \"action\": \"sns:Publish\", \"resource\": \"arn:aws:sns:us-east-1:777583092761:PurpleTopic\" }","title":"Basic Simulation"},{"location":"api/#extended-simulation","text":"Which Principals? POST /api/v1/sim/whichPrincipals curl -X POST ${YAMS_SERVER_ADDRESS}/api/v1/sim/whichPrincipals -d '{ \"action\": \"sns:publish\", \"resource\": \"arn:aws:sns:us-east-1:777583092761:PurpleTopic\" }' [ \"arn:aws:iam::777583092761:role/BlueRole\" ] Which Resources? POST /api/v1/sim/whichResources curl -X POST ${YAMS_SERVER_ADDRESS}/api/v1/sim/whichResources -d '{ \"principal\": \"arn:aws:iam::777583092761:role/BlueRole\", \"action\": \"sns:publish\" }' [ \"arn:aws:sns:us-east-1:213308312933:LemurTopic\", \"arn:aws:sns:us-east-1:777583092761:PurpleTopic\" ] Which Actions? POST /api/v1/sim/whichActions curl -X POST ${YAMS_SERVER_ADDRESS}/api/v1/sim/whichActions -d '{ \"principal\": \"arn:aws:iam::777583092761:role/BlueRole\", \"resource\": \"arn:aws:sns:us-east-1:777583092761:PurpleTopic\" }' [ \"sns:AddPermission\", \"sns:ConfirmSubscription\", \"sns:CreateTopic\", \"sns:DeleteTopic\", \"sns:GetDataProtectionPolicy\", \"sns:GetTopicAttributes\", \"sns:ListSubscriptionsByTopic\", \"sns:ListTagsForResource\", \"sns:Publish\", \"sns:PutDataProtectionPolicy\", \"sns:RemovePermission\", \"sns:SetTopicAttributes\", \"sns:Subscribe\", \"sns:TagResource\", \"sns:UntagResource\" ]","title":"Extended Simulation"},{"location":"api/#explain-trace","text":"POST /api/v1/sim curl -X POST ${YAMS_SERVER_ADDRESS}/api/v1/sim -d '{ \"principal\": \"arn:aws:iam::777583092761:role/RedRole\", \"action\": \"s3.GetObject\", \"resource\": \"arn:aws:s3:::yams-cyan/foo.txt\", \"explain\": true }' { \"result\": \"DENY\", \"principal\": \"arn:aws:iam::777583092761:role/RedRole\", \"action\": \"s3:GetObject\", \"resource\": \"arn:aws:s3:::yams-cyan/foo.txt\", \"explain\": [ \"[explicit deny] in resource policy\" ] }","title":"Explain &amp; Trace"},{"location":"api/#overlays","text":"POST /api/v1/sim curl -X POST ${YAMS_SERVER_ADDRESS}/api/v1/sim -d '{ \"principal\": \"arn:aws:iam::777583092761:role/RedRole\", \"action\": \"s3.GetObject\", \"resource\": \"arn:aws:s3:::yams-cyan/foo.txt\", \"overlay\": { \"principals\": [ { \"Type\": \"AWS::IAM::Role\", \"AccountId\": \"777583092761\", \"Name\": \"RedRole\", \"Arn\": \"arn:aws:iam::777583092761:role/RedRole\", \"Tags\": [ { \"Key\": \"is-yams-test-resource\", \"Value\": \"true\" }, { \"Key\": \"Color\", \"Value\": \"Blue\" } ], \"InlinePolicies\": [ { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": \"sts:assumerole\", \"Resource\": \"*\" } ] }, { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Deny\", \"Action\": \"dynamodb:*\", \"Resource\": \"*\" } ] }, { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": \"s3:ListAllMyBuckets\", \"Resource\": \"*\" }, { \"Effect\": \"Allow\", \"Action\": [ \"s3:GetObject\", \"s3:PutObject\", \"s3:DeleteObject\", \"s3:ListBucket\" ], \"Resource\": [ \"arn:aws:s3:::yams-*\", \"arn:aws:s3:::yams-*/*\" ] } ] } ], \"AttachedPolicies\": null, \"Groups\": null } ] } }' { \"result\": \"ALLOW\", \"principal\": \"arn:aws:iam::777583092761:role/RedRole\", \"action\": \"s3:GetObject\", \"resource\": \"arn:aws:s3:::yams-cyan/foo.txt\" }","title":"Overlays"},{"location":"concepts/","text":"Concepts yams has a number of proprietary concepts which help to model data and simulations. Understanding these concepts is not required to use the tooling, but can help make sense of the documentation and errors associated with the tool. Sources Getting data into yams revolves around the concept of a Source , which contains definitions for principals, resources, policies, accounts, etc. Sources are read periodically by the yams server to keep data fresh. Entities An Entity is a loose term to describe a thing associated with simulation. Included in the definition of Entities are: Principals Groups Resources Policies Tags Accounts Org Nodes Universe A Universe is a container which holds all known Entities . The most commonly used Universe would be the one representing baseline reality as defined by a set of Sources , however full or partial alternative Universes can be constructed as desired. Overlay An Overlay or Overlay Universe is similarly a container of Entities , but has the purpose of redefining or overriding Entity definitions defined in a base Universe . Priority is always given to the Overlay when resolving configurations.","title":"Concepts"},{"location":"concepts/#concepts","text":"yams has a number of proprietary concepts which help to model data and simulations. Understanding these concepts is not required to use the tooling, but can help make sense of the documentation and errors associated with the tool.","title":"Concepts"},{"location":"concepts/#sources","text":"Getting data into yams revolves around the concept of a Source , which contains definitions for principals, resources, policies, accounts, etc. Sources are read periodically by the yams server to keep data fresh.","title":"Sources"},{"location":"concepts/#entities","text":"An Entity is a loose term to describe a thing associated with simulation. Included in the definition of Entities are: Principals Groups Resources Policies Tags Accounts Org Nodes","title":"Entities"},{"location":"concepts/#universe","text":"A Universe is a container which holds all known Entities . The most commonly used Universe would be the one representing baseline reality as defined by a set of Sources , however full or partial alternative Universes can be constructed as desired.","title":"Universe"},{"location":"concepts/#overlay","text":"An Overlay or Overlay Universe is similarly a container of Entities , but has the purpose of redefining or overriding Entity definitions defined in a base Universe . Priority is always given to the Overlay when resolving configurations.","title":"Overlay"},{"location":"data_sources/","text":"Data Sources yams is only able to reliably simulate identities and resources it knows about, so providing accurate and complete data is crucial. To understand Sources in the abstract, please see Concepts > Sources . Sources can have various schemas, formats, and locations, which are inferred based on a string shorthand. Schemas AWS Config (default) Formats JSON ( .json suffix) JSON-L ( .jsonl suffix) Locations Local file (default, or via file:// prefix) S3 object ( s3:// prefix) Additionally, compressed Source files are supported for all formats and typically offer improved load performance for larger environments: gzip-compressed files ( .gz suffix) Examples Source string Explanation resources.json A local file with name resources.json ; formatted as a JSON array file://loadme.jsonl.gz A gzip-compressed local file with name loadme.jsonl.gz formatted as newline separated JSON objects s3://mybucket/resources.json.gz A gzip-compressed object in the S3 bucket mybucket with key resources.json.gz formatted as a JSON array","title":"Data Sources"},{"location":"data_sources/#data-sources","text":"yams is only able to reliably simulate identities and resources it knows about, so providing accurate and complete data is crucial. To understand Sources in the abstract, please see Concepts > Sources . Sources can have various schemas, formats, and locations, which are inferred based on a string shorthand.","title":"Data Sources"},{"location":"data_sources/#schemas","text":"AWS Config (default)","title":"Schemas"},{"location":"data_sources/#formats","text":"JSON ( .json suffix) JSON-L ( .jsonl suffix)","title":"Formats"},{"location":"data_sources/#locations","text":"Local file (default, or via file:// prefix) S3 object ( s3:// prefix) Additionally, compressed Source files are supported for all formats and typically offer improved load performance for larger environments: gzip-compressed files ( .gz suffix)","title":"Locations"},{"location":"data_sources/#examples","text":"Source string Explanation resources.json A local file with name resources.json ; formatted as a JSON array file://loadme.jsonl.gz A gzip-compressed local file with name loadme.jsonl.gz formatted as newline separated JSON objects s3://mybucket/resources.json.gz A gzip-compressed object in the S3 bucket mybucket with key resources.json.gz formatted as a JSON array","title":"Examples"},{"location":"deployment/","text":"Deployment Although yams is meant to be run as a server, the project provides no strong opinions about how or where that server is run. Infrastructure deployments vary greatly between companies, and very few assumptions hold true. The Go binary comprising the server can be easily built for cross-platform use, and the only real requirement is the ability to serve or front an HTTP service on an open port. If you have requests or ideas for deployment patterns to support more natively, please raise an issue on GitHub. At a Glance An overview for a recommended, basic yams deployment would be: Use yams dump commands to populate data sources in S3 Schedule these using your friendly, neighborhood cron equivalent for evergreen data Deploy on a single (large) EC2 instance or container Point yams server at the cached data in S3 Performance The following tips should help in maximizing the performance of a yams deployment for environments where the extra edge is needed: Use CPU-optimized EC2 instances: access simulation is almost an entirely CPU-bound endeavor and yams is heavily parallelized: use as many cores as you can spare Split data sources into multiple files: while data loading will rarely be the limiting factor, it can become clunky as your sources approach GB scale. Individual data sources are loaded on their own goroutines, and so benefit from being partitioned by environment, resource type, etc Consider horizontal scaling: adding multiple instances of the yams server is an effective way to scale up. However, since every server independently refreshes its data sources it can introduce consistency issues if servers become out of sync","title":"Deployment"},{"location":"deployment/#deployment","text":"Although yams is meant to be run as a server, the project provides no strong opinions about how or where that server is run. Infrastructure deployments vary greatly between companies, and very few assumptions hold true. The Go binary comprising the server can be easily built for cross-platform use, and the only real requirement is the ability to serve or front an HTTP service on an open port. If you have requests or ideas for deployment patterns to support more natively, please raise an issue on GitHub.","title":"Deployment"},{"location":"deployment/#at-a-glance","text":"An overview for a recommended, basic yams deployment would be: Use yams dump commands to populate data sources in S3 Schedule these using your friendly, neighborhood cron equivalent for evergreen data Deploy on a single (large) EC2 instance or container Point yams server at the cached data in S3","title":"At a Glance"},{"location":"deployment/#performance","text":"The following tips should help in maximizing the performance of a yams deployment for environments where the extra edge is needed: Use CPU-optimized EC2 instances: access simulation is almost an entirely CPU-bound endeavor and yams is heavily parallelized: use as many cores as you can spare Split data sources into multiple files: while data loading will rarely be the limiting factor, it can become clunky as your sources approach GB scale. Individual data sources are loaded on their own goroutines, and so benefit from being partitioned by environment, resource type, etc Consider horizontal scaling: adding multiple instances of the yams server is an effective way to scale up. However, since every server independently refreshes its data sources it can introduce consistency issues if servers become out of sync","title":"Performance"},{"location":"generating_data/","text":"Generating Data The data sources used by yams can be created by any tooling adhering to the schema and naming conventions. For convenience, yams itself can also serve as a generator of this data. At this time, yams supports the generation of two types of data: Entities : principals, resources, policies, etc Org Data : accounts, OUs, SCPs, etc Entity Data Using yams Note Using yams to generate Entity data requires providing the program with credentials to perform config:SelectAggregateResourceConfig in the same AWS account as the AWS Config Aggregator Entity data can be generated via the yams dump config subcommand, which requires specifying both: -a/-aggregator the name of the AWS Config aggregator to use -r/-rtype the AWS Config resource type(s) that you would like to dump (allows multiple!) Examples Dump all known SQS Queues to stdout: yams dump config \\ -a my-aggregator \\ -r AWS::SQS::Queue Dump all IAM Entities to a file: yams dump config \\ -a my-aggregator \\ -r AWS::IAM::Role \\ -r AWS::IAM::User \\ -r AWS::IAM::Group \\ -r AWS::IAM::Policy \\ -o out.json Dump all IAM Entities and key resources to an S3 bucket; compressed: yams dump config \\ -a my-aggregator \\ -r AWS::IAM::Role \\ -r AWS::IAM::User \\ -r AWS::IAM::Group \\ -r AWS::IAM::Policy \\ -r AWS::S3::Bucket \\ -r AWS::SQS::Queue \\ -r AWS::SNS::Topic \\ -r AWS::DynamoDB::Table \\ -r AWS::KMS::Key \\ -o s3://my-bucket/resources.json.gz Alternatives You can also use basic command-line tools such as awscli and jq to construct valid Sources with highly customized subsets of data: aws configservice select-aggregate-resource-config \\ --configuration-aggregator-name my-aggregator \\ --expression \"SELECT *, configuration, supplementaryConfiguration, tags WHERE ...\" \\ | jq -c '.Results[] | fromjson' \\ > resources.jsonl Org Data Using yams Note Using yams to generate Org data requires providing the program with credentials to access read-only organizations APIs in the org master account Org data can be generated via the yams dump org subcommand. Examples Dump org data to stdout: yams dump org Dump org data to an S3 bucket; compressed: yams dump org \\ -o s3://my-bucket/org.json.gz Alternatives At this time, there are no valid alternatives to generating Org data, due to a lack of standard schema and definition for these entity types.","title":"Generating Data"},{"location":"generating_data/#generating-data","text":"The data sources used by yams can be created by any tooling adhering to the schema and naming conventions. For convenience, yams itself can also serve as a generator of this data. At this time, yams supports the generation of two types of data: Entities : principals, resources, policies, etc Org Data : accounts, OUs, SCPs, etc","title":"Generating Data"},{"location":"generating_data/#entity-data","text":"","title":"Entity Data"},{"location":"generating_data/#using-yams","text":"Note Using yams to generate Entity data requires providing the program with credentials to perform config:SelectAggregateResourceConfig in the same AWS account as the AWS Config Aggregator Entity data can be generated via the yams dump config subcommand, which requires specifying both: -a/-aggregator the name of the AWS Config aggregator to use -r/-rtype the AWS Config resource type(s) that you would like to dump (allows multiple!)","title":"Using yams"},{"location":"generating_data/#examples","text":"Dump all known SQS Queues to stdout: yams dump config \\ -a my-aggregator \\ -r AWS::SQS::Queue Dump all IAM Entities to a file: yams dump config \\ -a my-aggregator \\ -r AWS::IAM::Role \\ -r AWS::IAM::User \\ -r AWS::IAM::Group \\ -r AWS::IAM::Policy \\ -o out.json Dump all IAM Entities and key resources to an S3 bucket; compressed: yams dump config \\ -a my-aggregator \\ -r AWS::IAM::Role \\ -r AWS::IAM::User \\ -r AWS::IAM::Group \\ -r AWS::IAM::Policy \\ -r AWS::S3::Bucket \\ -r AWS::SQS::Queue \\ -r AWS::SNS::Topic \\ -r AWS::DynamoDB::Table \\ -r AWS::KMS::Key \\ -o s3://my-bucket/resources.json.gz","title":"Examples"},{"location":"generating_data/#alternatives","text":"You can also use basic command-line tools such as awscli and jq to construct valid Sources with highly customized subsets of data: aws configservice select-aggregate-resource-config \\ --configuration-aggregator-name my-aggregator \\ --expression \"SELECT *, configuration, supplementaryConfiguration, tags WHERE ...\" \\ | jq -c '.Results[] | fromjson' \\ > resources.jsonl","title":"Alternatives"},{"location":"generating_data/#org-data","text":"","title":"Org Data"},{"location":"generating_data/#using-yams_1","text":"Note Using yams to generate Org data requires providing the program with credentials to access read-only organizations APIs in the org master account Org data can be generated via the yams dump org subcommand.","title":"Using yams"},{"location":"generating_data/#examples_1","text":"Dump org data to stdout: yams dump org Dump org data to an S3 bucket; compressed: yams dump org \\ -o s3://my-bucket/org.json.gz","title":"Examples"},{"location":"generating_data/#alternatives_1","text":"At this time, there are no valid alternatives to generating Org data, due to a lack of standard schema and definition for these entity types.","title":"Alternatives"},{"location":"getting_started/","text":"Getting Started This page will help you get up and running with yams Prerequisites Go >= 1.24 Installation yams can be used as a Go library via: go get -u github.com/nsiow/yams Similarly, the CLI for yams can be installed via: go install github.com/nsiow/yams/cmd/yams@latest Note If installing via go install , ensure that you have go env GOPATH somewhere in your $PATH Alternatively, you can clone the source and run: make && make install By default, the make commands will install yams to /usr/local/bin/ . If you wish to install elsewhere or do not have sufficient permissions, you may need to either: Set the YAMS_INSTALL_DIR environment variable to an alternative location Run make install as root Running a Server A local or remote instance of the yams server can be started via: yams server \\ -source testdata/real-world/awsconfig.jsonl \\ -source testdata/real-world/org.jsonl For information about configuring sources, see Data Sources For information about generating data, see Generating Data Configuring the CLI There are two options for pointing the yams CLI at the desired server: via the -s/--server flag for individual invocations via the YAMS_SERVER_ADDRESS environment variable Once set, you should be able to confirm connectivity using the status subcommand: yams status { \"accounts\": 4, \"entities\": 1448, \"groups\": 0, \"policies\": 1371, \"principals\": 20, \"resources\": 53, \"sources\": [ { \"source\": \"testdata/real-world/awsconfig.jsonl\", \"updated\": \"2025-03-15T:04:35.173468943-07:00\" }, { \"source\": \"testdata/real-world/org.jsonl\", \"updated\": \"2025-03-35T:04:35.173687682-07:00\" } ] }","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"This page will help you get up and running with yams","title":"Getting Started"},{"location":"getting_started/#prerequisites","text":"Go >= 1.24","title":"Prerequisites"},{"location":"getting_started/#installation","text":"yams can be used as a Go library via: go get -u github.com/nsiow/yams Similarly, the CLI for yams can be installed via: go install github.com/nsiow/yams/cmd/yams@latest Note If installing via go install , ensure that you have go env GOPATH somewhere in your $PATH Alternatively, you can clone the source and run: make && make install By default, the make commands will install yams to /usr/local/bin/ . If you wish to install elsewhere or do not have sufficient permissions, you may need to either: Set the YAMS_INSTALL_DIR environment variable to an alternative location Run make install as root","title":"Installation"},{"location":"getting_started/#running-a-server","text":"A local or remote instance of the yams server can be started via: yams server \\ -source testdata/real-world/awsconfig.jsonl \\ -source testdata/real-world/org.jsonl For information about configuring sources, see Data Sources For information about generating data, see Generating Data","title":"Running a Server"},{"location":"getting_started/#configuring-the-cli","text":"There are two options for pointing the yams CLI at the desired server: via the -s/--server flag for individual invocations via the YAMS_SERVER_ADDRESS environment variable Once set, you should be able to confirm connectivity using the status subcommand: yams status { \"accounts\": 4, \"entities\": 1448, \"groups\": 0, \"policies\": 1371, \"principals\": 20, \"resources\": 53, \"sources\": [ { \"source\": \"testdata/real-world/awsconfig.jsonl\", \"updated\": \"2025-03-15T:04:35.173468943-07:00\" }, { \"source\": \"testdata/real-world/org.jsonl\", \"updated\": \"2025-03-35T:04:35.173687682-07:00\" } ] }","title":"Configuring the CLI"},{"location":"inventory/","text":"Inventory yams provides the ability to query and investigate various sources of IAM policy data in your environment. This data is populated via Sources and includes the following Entity types: AWS API Actions Principals Resources Policies and Accounts The inventorying commands for each Entity type follow the same common pattern: yams <type> will list all known instances of that Entity type yams <type> -q/-query <term> will do a case-insensitive search using the provided term across that Entity type yams <type> -k/-key <name/ARN> will look up the Entity by its primary ID (typically ARN, name, or ID); exact match AWS API Actions List yams actions [ \"a2c:GetContainerizationJobDetails\", \"a2c:GetDeploymentJobDetails\", \"a2c:StartContainerizationJob\", \"a2c:StartDeploymentJob\", \"a4b:ApproveSkill\", \"a4b:AssociateContactWithAddressBook\", \"a4b:AssociateDeviceWithNetworkProfile\", \"a4b:AssociateDeviceWithRoom\", \"a4b:AssociateSkillGroupWithRoom\", ... ] Search yams actions -q networkinterface [ \"ec2:AttachNetworkInterface\", \"ec2:CreateNetworkInterface\", \"ec2:CreateNetworkInterfacePermission\", \"ec2:DeleteNetworkInterface\", \"ec2:DeleteNetworkInterfacePermission\", \"ec2:DescribeNetworkInterfaceAttribute\", \"ec2:DescribeNetworkInterfacePermissions\", \"ec2:DescribeNetworkInterfaces\", \"ec2:DetachNetworkInterface\", ... ] Lookup yams actions -k dynamodb:PutItem // also valid yams actions -k dynamodb.putitem { \"Name\": \"PutItem\", \"Service\": \"dynamodb\", \"ActionConditionKeys\": [ \"dynamodb:attributes\", \"dynamodb:enclosingoperation\", \"dynamodb:leadingkeys\", \"dynamodb:returnconsumedcapacity\", \"dynamodb:returnvalues\" ], \"ResolvedResources\": [ { \"Name\": \"table\", \"ARNFormats\": [ \"arn:*:dynamodb:*:*:table/*\" ], \"ConditionKeys\": [ \"aws:resourcetag\" ] } ] } Principals List yams principals [ \"arn:aws:iam::213308312933:role/LionRole\", \"arn:aws:iam::213308312933:role/MouseRole\", \"arn:aws:iam::213308312933:role/PandaRole\", \"arn:aws:iam::213308312933:user/CatUser\", \"arn:aws:iam::213308312933:user/DogUser\", \"arn:aws:iam::213308312933:user/FishUser\", \"arn:aws:iam::255082776537:role/BurgerRole\", \"arn:aws:iam::255082776537:role/NoodleRole\", \"arn:aws:iam::255082776537:role/PizzaRole\", ... ] Search yams principals -q cat [ \"arn:aws:iam::213308312933:user/CatUser\" ] Lookup yams principals -k arn:aws:iam::213308312933:user/CatUser { \"Type\": \"AWS::IAM::User\", \"AccountId\": \"213308312933\", \"Name\": \"CatUser\", \"Arn\": \"arn:aws:iam::213308312933:user/CatUser\", ... } Resources List yams resources [ \"arn:aws:dynamodb:us-east-1:213308312933:table/ElephantTable\", \"arn:aws:dynamodb:us-east-1:255082776537:table/TacoTable\", \"arn:aws:dynamodb:us-east-1:777583092761:table/NavyTable\", \"arn:aws:dynamodb:us-east-1:777583092761:table/OrangeTable\", \"arn:aws:iam::213308312933:policy/yams-test-infra-DogPolicy-pX0mgCedLaeo\", \"arn:aws:iam::213308312933:policy/yams-test-infra-LlamaBoundary-mvVoctsE53pG\", \"arn:aws:iam::213308312933:role/LionRole\", \"arn:aws:iam::213308312933:role/MouseRole\", \"arn:aws:iam::213308312933:role/PandaRole\", ... ] Search yams resources -q s3 [ \"arn:aws:s3:::banana-bucket-255082776537\", \"arn:aws:s3:::crocodile-bucket-213308312933\", \"arn:aws:s3:::peach-bucket-777583092761\", \"arn:aws:s3:::yams-bear\", \"arn:aws:s3:::yams-cyan\", \"arn:aws:s3:::yams-green\", \"arn:aws:s3:::yams-magenta\" ] Lookup yams resources -k arn:aws:s3:::yams-cyan { \"Type\": \"AWS::S3::Bucket\", \"AccountId\": \"777583092761\", \"Region\": \"us-east-1\", \"Name\": \"yams-cyan\", \"Arn\": \"arn:aws:s3:::yams-cyan\", \"Policy\": { \"Version\": \"2012-10-17\", \"Id\": \"\", \"Statement\": [ { \"Sid\": \"\", \"Effect\": \"Deny\", \"Principal\": \"*\", \"Action\": [ \"s3:listbucket\", \"s3:getobject\" ], \"Resource\": [ \"arn:aws:s3:::yams-cyan\", \"arn:aws:s3:::yams-cyan/*\" ], \"Condition\": { \"StringNotEquals\": { \"aws:PrincipalTag/Color\": \"Blue\" } } } ] }, ... } Policies List yams policies [ \"arn:aws:iam::213308312933:policy/yams-test-infra-DogPolicy-pX0mgCedLaeo\", \"arn:aws:iam::213308312933:policy/yams-test-infra-LlamaBoundary-mvVoctsE53pG\", \"arn:aws:iam::255082776537:policy/yams-test-infra-CupcakeBoundary-udxeJjTH6ebJ\", \"arn:aws:iam::255082776537:policy/yams-test-infra-SaladPolicy-opE0edVZrSWR\", \"arn:aws:iam::255082776537:policy/yams-test-infra-SoupPolicy-65QKm40EPh1y\", \"arn:aws:iam::777583092761:policy/yams-test-infra-GreyPolicy-gLf7j3ZwJYBm\", \"arn:aws:iam::777583092761:policy/yams-test-infra-MustardBoundary-47JW6znulEXt\", \"arn:aws:iam::777583092761:policy/yams-test-infra-PinkBoundary-xuINwerkCuZ3\", \"arn:aws:iam::aws:policy/AIOpsAssistantPolicy\", ... ] Search yams policies -q test [ \"arn:aws:iam::213308312933:policy/yams-test-infra-DogPolicy-pX0mgCedLaeo\", \"arn:aws:iam::213308312933:policy/yams-test-infra-LlamaBoundary-mvVoctsE53pG\", \"arn:aws:iam::255082776537:policy/yams-test-infra-CupcakeBoundary-udxeJjTH6ebJ\", \"arn:aws:iam::255082776537:policy/yams-test-infra-SaladPolicy-opE0edVZrSWR\", \"arn:aws:iam::255082776537:policy/yams-test-infra-SoupPolicy-65QKm40EPh1y\", \"arn:aws:iam::777583092761:policy/yams-test-infra-GreyPolicy-gLf7j3ZwJYBm\", \"arn:aws:iam::777583092761:policy/yams-test-infra-MustardBoundary-47JW6znulEXt\", \"arn:aws:iam::777583092761:policy/yams-test-infra-PinkBoundary-xuINwerkCuZ3\", \"arn:aws:iam::aws:policy/AWSIoTDeviceTesterForFreeRTOSFullAccess\", ... ] Lookup yams policies -k arn:aws:iam::213308312933:policy/yams-test-infra-DogPolicy-pX0mgCedLaeo { \"Type\": \"AWS::IAM::Policy\", \"AccountId\": \"213308312933\", \"Arn\": \"arn:aws:iam::213308312933:policy/yams-test-infra-DogPolicy-pX0mgCedLaeo\", \"Name\": \"yams-test-infra-DogPolicy-pX0mgCedLaeo\", \"Policy\": { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": \"*\", \"Resource\": \"*\" } ] } } Accounts List yams accounts [ \"213308312933\", \"255082776537\", \"777583092761\", \"810970970902\" ] Search yams accounts -q 213 [ \"213308312933\" ] Lookup yams accounts -k 213308312933 { \"Id\": \"213308312933\", \"Name\": \"yams1\", \"OrgId\": \"o-9hmw0uhxs4\", \"OrgPaths\": [ \"o-9hmw0uhxs4/r-m4x4/\", \"o-9hmw0uhxs4/r-m4x4/ou-m4x4-onrzr6t1/\" ], \"OrgNodes\": ... }","title":"Inventory"},{"location":"inventory/#inventory","text":"yams provides the ability to query and investigate various sources of IAM policy data in your environment. This data is populated via Sources and includes the following Entity types: AWS API Actions Principals Resources Policies and Accounts The inventorying commands for each Entity type follow the same common pattern: yams <type> will list all known instances of that Entity type yams <type> -q/-query <term> will do a case-insensitive search using the provided term across that Entity type yams <type> -k/-key <name/ARN> will look up the Entity by its primary ID (typically ARN, name, or ID); exact match","title":"Inventory"},{"location":"inventory/#aws-api-actions","text":"","title":"AWS API Actions"},{"location":"inventory/#list","text":"yams actions [ \"a2c:GetContainerizationJobDetails\", \"a2c:GetDeploymentJobDetails\", \"a2c:StartContainerizationJob\", \"a2c:StartDeploymentJob\", \"a4b:ApproveSkill\", \"a4b:AssociateContactWithAddressBook\", \"a4b:AssociateDeviceWithNetworkProfile\", \"a4b:AssociateDeviceWithRoom\", \"a4b:AssociateSkillGroupWithRoom\", ... ]","title":"List"},{"location":"inventory/#search","text":"yams actions -q networkinterface [ \"ec2:AttachNetworkInterface\", \"ec2:CreateNetworkInterface\", \"ec2:CreateNetworkInterfacePermission\", \"ec2:DeleteNetworkInterface\", \"ec2:DeleteNetworkInterfacePermission\", \"ec2:DescribeNetworkInterfaceAttribute\", \"ec2:DescribeNetworkInterfacePermissions\", \"ec2:DescribeNetworkInterfaces\", \"ec2:DetachNetworkInterface\", ... ]","title":"Search"},{"location":"inventory/#lookup","text":"yams actions -k dynamodb:PutItem // also valid yams actions -k dynamodb.putitem { \"Name\": \"PutItem\", \"Service\": \"dynamodb\", \"ActionConditionKeys\": [ \"dynamodb:attributes\", \"dynamodb:enclosingoperation\", \"dynamodb:leadingkeys\", \"dynamodb:returnconsumedcapacity\", \"dynamodb:returnvalues\" ], \"ResolvedResources\": [ { \"Name\": \"table\", \"ARNFormats\": [ \"arn:*:dynamodb:*:*:table/*\" ], \"ConditionKeys\": [ \"aws:resourcetag\" ] } ] }","title":"Lookup"},{"location":"inventory/#principals","text":"","title":"Principals"},{"location":"inventory/#list_1","text":"yams principals [ \"arn:aws:iam::213308312933:role/LionRole\", \"arn:aws:iam::213308312933:role/MouseRole\", \"arn:aws:iam::213308312933:role/PandaRole\", \"arn:aws:iam::213308312933:user/CatUser\", \"arn:aws:iam::213308312933:user/DogUser\", \"arn:aws:iam::213308312933:user/FishUser\", \"arn:aws:iam::255082776537:role/BurgerRole\", \"arn:aws:iam::255082776537:role/NoodleRole\", \"arn:aws:iam::255082776537:role/PizzaRole\", ... ]","title":"List"},{"location":"inventory/#search_1","text":"yams principals -q cat [ \"arn:aws:iam::213308312933:user/CatUser\" ]","title":"Search"},{"location":"inventory/#lookup_1","text":"yams principals -k arn:aws:iam::213308312933:user/CatUser { \"Type\": \"AWS::IAM::User\", \"AccountId\": \"213308312933\", \"Name\": \"CatUser\", \"Arn\": \"arn:aws:iam::213308312933:user/CatUser\", ... }","title":"Lookup"},{"location":"inventory/#resources","text":"","title":"Resources"},{"location":"inventory/#list_2","text":"yams resources [ \"arn:aws:dynamodb:us-east-1:213308312933:table/ElephantTable\", \"arn:aws:dynamodb:us-east-1:255082776537:table/TacoTable\", \"arn:aws:dynamodb:us-east-1:777583092761:table/NavyTable\", \"arn:aws:dynamodb:us-east-1:777583092761:table/OrangeTable\", \"arn:aws:iam::213308312933:policy/yams-test-infra-DogPolicy-pX0mgCedLaeo\", \"arn:aws:iam::213308312933:policy/yams-test-infra-LlamaBoundary-mvVoctsE53pG\", \"arn:aws:iam::213308312933:role/LionRole\", \"arn:aws:iam::213308312933:role/MouseRole\", \"arn:aws:iam::213308312933:role/PandaRole\", ... ]","title":"List"},{"location":"inventory/#search_2","text":"yams resources -q s3 [ \"arn:aws:s3:::banana-bucket-255082776537\", \"arn:aws:s3:::crocodile-bucket-213308312933\", \"arn:aws:s3:::peach-bucket-777583092761\", \"arn:aws:s3:::yams-bear\", \"arn:aws:s3:::yams-cyan\", \"arn:aws:s3:::yams-green\", \"arn:aws:s3:::yams-magenta\" ]","title":"Search"},{"location":"inventory/#lookup_2","text":"yams resources -k arn:aws:s3:::yams-cyan { \"Type\": \"AWS::S3::Bucket\", \"AccountId\": \"777583092761\", \"Region\": \"us-east-1\", \"Name\": \"yams-cyan\", \"Arn\": \"arn:aws:s3:::yams-cyan\", \"Policy\": { \"Version\": \"2012-10-17\", \"Id\": \"\", \"Statement\": [ { \"Sid\": \"\", \"Effect\": \"Deny\", \"Principal\": \"*\", \"Action\": [ \"s3:listbucket\", \"s3:getobject\" ], \"Resource\": [ \"arn:aws:s3:::yams-cyan\", \"arn:aws:s3:::yams-cyan/*\" ], \"Condition\": { \"StringNotEquals\": { \"aws:PrincipalTag/Color\": \"Blue\" } } } ] }, ... }","title":"Lookup"},{"location":"inventory/#policies","text":"","title":"Policies"},{"location":"inventory/#list_3","text":"yams policies [ \"arn:aws:iam::213308312933:policy/yams-test-infra-DogPolicy-pX0mgCedLaeo\", \"arn:aws:iam::213308312933:policy/yams-test-infra-LlamaBoundary-mvVoctsE53pG\", \"arn:aws:iam::255082776537:policy/yams-test-infra-CupcakeBoundary-udxeJjTH6ebJ\", \"arn:aws:iam::255082776537:policy/yams-test-infra-SaladPolicy-opE0edVZrSWR\", \"arn:aws:iam::255082776537:policy/yams-test-infra-SoupPolicy-65QKm40EPh1y\", \"arn:aws:iam::777583092761:policy/yams-test-infra-GreyPolicy-gLf7j3ZwJYBm\", \"arn:aws:iam::777583092761:policy/yams-test-infra-MustardBoundary-47JW6znulEXt\", \"arn:aws:iam::777583092761:policy/yams-test-infra-PinkBoundary-xuINwerkCuZ3\", \"arn:aws:iam::aws:policy/AIOpsAssistantPolicy\", ... ]","title":"List"},{"location":"inventory/#search_3","text":"yams policies -q test [ \"arn:aws:iam::213308312933:policy/yams-test-infra-DogPolicy-pX0mgCedLaeo\", \"arn:aws:iam::213308312933:policy/yams-test-infra-LlamaBoundary-mvVoctsE53pG\", \"arn:aws:iam::255082776537:policy/yams-test-infra-CupcakeBoundary-udxeJjTH6ebJ\", \"arn:aws:iam::255082776537:policy/yams-test-infra-SaladPolicy-opE0edVZrSWR\", \"arn:aws:iam::255082776537:policy/yams-test-infra-SoupPolicy-65QKm40EPh1y\", \"arn:aws:iam::777583092761:policy/yams-test-infra-GreyPolicy-gLf7j3ZwJYBm\", \"arn:aws:iam::777583092761:policy/yams-test-infra-MustardBoundary-47JW6znulEXt\", \"arn:aws:iam::777583092761:policy/yams-test-infra-PinkBoundary-xuINwerkCuZ3\", \"arn:aws:iam::aws:policy/AWSIoTDeviceTesterForFreeRTOSFullAccess\", ... ]","title":"Search"},{"location":"inventory/#lookup_3","text":"yams policies -k arn:aws:iam::213308312933:policy/yams-test-infra-DogPolicy-pX0mgCedLaeo { \"Type\": \"AWS::IAM::Policy\", \"AccountId\": \"213308312933\", \"Arn\": \"arn:aws:iam::213308312933:policy/yams-test-infra-DogPolicy-pX0mgCedLaeo\", \"Name\": \"yams-test-infra-DogPolicy-pX0mgCedLaeo\", \"Policy\": { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": \"*\", \"Resource\": \"*\" } ] } }","title":"Lookup"},{"location":"inventory/#accounts","text":"","title":"Accounts"},{"location":"inventory/#list_4","text":"yams accounts [ \"213308312933\", \"255082776537\", \"777583092761\", \"810970970902\" ]","title":"List"},{"location":"inventory/#search_4","text":"yams accounts -q 213 [ \"213308312933\" ]","title":"Search"},{"location":"inventory/#lookup_4","text":"yams accounts -k 213308312933 { \"Id\": \"213308312933\", \"Name\": \"yams1\", \"OrgId\": \"o-9hmw0uhxs4\", \"OrgPaths\": [ \"o-9hmw0uhxs4/r-m4x4/\", \"o-9hmw0uhxs4/r-m4x4/ou-m4x4-onrzr6t1/\" ], \"OrgNodes\": ... }","title":"Lookup"},{"location":"simulation/","text":"Simulation One of the core features of yams is the ability to accurately simulate IAM access decisions. These simulation APIs revolve around four key inputs we will designate as the PARC tuple: Principal : who is making the request Action : what AWS API call is being made Resource : the target of the AWS API call Context : any additional request context (IP, User-Agent, etc) Basic Simulation The most straightforward type of simulation is for a single request, providing all aspects of PARC . Once your data is loaded, basic simulation can be facilitated via the yams CLI as follows: yams sim -principal <principal_arn> -action <api_action> -resource <resource_arn> Example yams sim \\ -principal arn:aws:iam::777583092761:role/RedRole \\ -action s3.getobject \\ -resource arn:aws:s3:::yams-magenta/secret.txt { \"result\": \"ALLOW\", \"principal\": \"arn:aws:iam::777583092761:role/RedRole\", \"action\": \"s3:GetObject\", \"resource\": \"arn:aws:s3:::yams-magenta/secret.txt\" } Extended Simulation A more flexible form of simulation can be achieved by omitting one of the PAR identifiers. Doing so will affect the results of simulation in the following ways: Data Provided Results Principal and Action \"against which resources can this Principal perform this Action \" Action and Resource \"which Principals can perform this Action against this Resource \" Principal and Resource \"which actions can this Principal perform against this Resource \" Example: \"which resources?\" yams sim \\ -p arn:aws:iam::777583092761:role/RedRole \\ -a s3.getobject [ \"arn:aws:s3:::yams-magenta/*\" ] Example: \"which principals?\" yams sim \\ -a s3.getobject \\ -r arn:aws:s3:::yams-cyan/secret.txt [ \"arn:aws:iam::777583092761:role/BlueRole\" ] Example: \"which actions?\" yams sim \\ -p arn:aws:iam::777583092761:role/RedRole \\ -r arn:aws:s3:::yams-magenta/secret.txt [ \"s3:DeleteObject\", \"s3:GetObject\", \"s3:ListBucket\", \"s3:PutObject\" ] Explain & Trace Beyond knowing the result of an access decision, it is often useful to know why that decision came to be. yams comes with two additional simulation flags which help users to understand which policies and statements are contributing towards a particular decision. -e/--explain : provides a concise, human-readable explanation of how the access decision was reached -t/--trace : provides a detailed walkthrough for each step of the policy evaluation Warning These flags are only available for basic simulation, as recording and storing the data for extended simulation becomes prohibitive at sufficiently large scale Example: explain yams sim \\ -p arn:aws:iam::777583092761:role/BlueRole \\ -a sns.publish \\ -r arn:aws:sns:us-east-1:213308312933:LemurTopic \\ -explain { \"result\": \"ALLOW\", \"principal\": \"arn:aws:iam::777583092761:role/BlueRole\", \"action\": \"sns:Publish\", \"resource\": \"arn:aws:sns:us-east-1:213308312933:LemurTopic\", \"explain\": [ \"allow in inline principal policy: 1\", \"[allow] access granted via x-account identity + resource policies\" ] } Example: trace yams sim \\ -p arn:aws:iam::777583092761:role/BlueRole \\ -a sns.publish \\ -r arn:aws:sns:us-east-1:213308312933:LemurTopic \\ -trace { \"result\": \"ALLOW\", \"principal\": \"arn:aws:iam::777583092761:role/BlueRole\", \"action\": \"sns:Publish\", \"resource\": \"arn:aws:sns:us-east-1:213308312933:LemurTopic\", \"explain\": [ \"allow in inline principal policy: 1\", \"[allow] access granted via x-account identity + resource policies\" ], \"trace\": [ \"(allow) begin: root\", \" begin: evaluating resource policies\", \" begin: evaluating policy: 0\", \" begin: evaluating statement: AllowBlueRole\", \" begin: evaluating Action\", \" using Action block\", \" match: sns:Publish and sns:Publish\", \" end: evaluating Action\", \" begin: evaluating Resource\", \" using Resource block\", ... } Overlays For more information about overlays, please refer to Concepts > Overlays Overlays are supported as input files to the yams sim subcommand, allowing you to override entity definitions as needed. Example: Using an overlay yams sim \\ -p arn:aws:iam::777583092761:role/RedRole \\ -r arn:aws:s3:::yams-magenta/secret.txt [ \"s3:DeleteObject\", \"s3:GetObject\", \"s3:ListBucket\", \"s3:PutObject\" ] yams principals \\ -k arn:aws:iam::777583092761:role/RedRole \\ > RedRole.json vim redrole.json # make some edits, add s3:PutObjectAcl permission yams sim \\ -p arn:aws:iam::777583092761:role/RedRole \\ -r arn:aws:s3:::yams-magenta/secret.txt \\ -overlay RedRole.json [ \"s3:DeleteObject\", \"s3:GetObject\", \"s3:ListBucket\", \"s3:PutObject\", \"s3:PutObjectAcl\" ] Note When defining an entity for an overlay, make sure to use the non-frozen version. Overriding managed policy definitions should be accomplished by overwriting the policy itself Entity Autocomplete To avoid having excessive copy-pasting of ARNs, yams will attempt to autocomplete any provided ARN fragments into full entity ARNs. If a single match is found, that ARN will be used If multiple matches are found, yams will return an error The return value of the simulation will echo the full Principal and Resource ARNs used. Example: Successful Autocomplete yams sim \\ -p arn:aws:iam::777583092761:role/BlueRole \\ -a sns.publish \\ -r arn:aws:sns:us-east-1:213308312933:LemurTopic \\ can be shortened to: yams sim \\ -p bluerole \\ -a sns.publish \\ -r lemurtopic Example: Failed Autocomplete yams sim -p role -a s3.listbucket -r bucket { \"error\": \"simulation error: error resolving principal for simulation: too many matches for 'role': [arn:aws:iam::777583092761:role/CoralRole arn:aws:iam::213308312933:role/LionRole arn:aws:iam::777583092761:role/TaupeRole arn:aws:iam::213308312933:role/MouseRole arn:aws:iam::213308312933:role/PandaRole arn:aws:iam::255082776537:role/BurgerRole arn:aws:iam::255082776537:role/SushiRole arn:aws:iam::777583092761:role/BlueRole arn:aws:iam::777583092761:role/RedRole arn:aws:iam::777583092761:role/GreenRole]\" } FAQ Q: How do I simulate API actions without resources? A: For actions that do not accept a Resource, you can simply omit it from the command. yams will skip resource-level evaluation and return the simulation result directly. For example, yams sim \\ -p arn:aws:iam::777583092761:role/RedRole \\ -a s3:listallmybuckets Q: I am getting weird results when simulating a \"Create\" API operation A: \"Create\" operations are tricky. While we usually do not think of them as being performed against a resource (after all, they are creating one), IAM authorization does act as if they are. A common use case for this is limiting a Principal to create resources with a specified prefix, which means the authorization decision depends heavily on the name of the resource itself. For example, if you want to model whether or not an IAM role can create a bucket, you would model it as: yams sim \\ -p arn:aws:iam::777583092761:role/RedRole \\ -a s3:CreateBucket \\ -r arn:aws:s3:::my-hypothetical-bucket","title":"Simulation"},{"location":"simulation/#simulation","text":"One of the core features of yams is the ability to accurately simulate IAM access decisions. These simulation APIs revolve around four key inputs we will designate as the PARC tuple: Principal : who is making the request Action : what AWS API call is being made Resource : the target of the AWS API call Context : any additional request context (IP, User-Agent, etc)","title":"Simulation"},{"location":"simulation/#basic-simulation","text":"The most straightforward type of simulation is for a single request, providing all aspects of PARC . Once your data is loaded, basic simulation can be facilitated via the yams CLI as follows: yams sim -principal <principal_arn> -action <api_action> -resource <resource_arn> Example yams sim \\ -principal arn:aws:iam::777583092761:role/RedRole \\ -action s3.getobject \\ -resource arn:aws:s3:::yams-magenta/secret.txt { \"result\": \"ALLOW\", \"principal\": \"arn:aws:iam::777583092761:role/RedRole\", \"action\": \"s3:GetObject\", \"resource\": \"arn:aws:s3:::yams-magenta/secret.txt\" }","title":"Basic Simulation"},{"location":"simulation/#extended-simulation","text":"A more flexible form of simulation can be achieved by omitting one of the PAR identifiers. Doing so will affect the results of simulation in the following ways: Data Provided Results Principal and Action \"against which resources can this Principal perform this Action \" Action and Resource \"which Principals can perform this Action against this Resource \" Principal and Resource \"which actions can this Principal perform against this Resource \" Example: \"which resources?\" yams sim \\ -p arn:aws:iam::777583092761:role/RedRole \\ -a s3.getobject [ \"arn:aws:s3:::yams-magenta/*\" ] Example: \"which principals?\" yams sim \\ -a s3.getobject \\ -r arn:aws:s3:::yams-cyan/secret.txt [ \"arn:aws:iam::777583092761:role/BlueRole\" ] Example: \"which actions?\" yams sim \\ -p arn:aws:iam::777583092761:role/RedRole \\ -r arn:aws:s3:::yams-magenta/secret.txt [ \"s3:DeleteObject\", \"s3:GetObject\", \"s3:ListBucket\", \"s3:PutObject\" ]","title":"Extended Simulation"},{"location":"simulation/#explain-trace","text":"Beyond knowing the result of an access decision, it is often useful to know why that decision came to be. yams comes with two additional simulation flags which help users to understand which policies and statements are contributing towards a particular decision. -e/--explain : provides a concise, human-readable explanation of how the access decision was reached -t/--trace : provides a detailed walkthrough for each step of the policy evaluation Warning These flags are only available for basic simulation, as recording and storing the data for extended simulation becomes prohibitive at sufficiently large scale Example: explain yams sim \\ -p arn:aws:iam::777583092761:role/BlueRole \\ -a sns.publish \\ -r arn:aws:sns:us-east-1:213308312933:LemurTopic \\ -explain { \"result\": \"ALLOW\", \"principal\": \"arn:aws:iam::777583092761:role/BlueRole\", \"action\": \"sns:Publish\", \"resource\": \"arn:aws:sns:us-east-1:213308312933:LemurTopic\", \"explain\": [ \"allow in inline principal policy: 1\", \"[allow] access granted via x-account identity + resource policies\" ] } Example: trace yams sim \\ -p arn:aws:iam::777583092761:role/BlueRole \\ -a sns.publish \\ -r arn:aws:sns:us-east-1:213308312933:LemurTopic \\ -trace { \"result\": \"ALLOW\", \"principal\": \"arn:aws:iam::777583092761:role/BlueRole\", \"action\": \"sns:Publish\", \"resource\": \"arn:aws:sns:us-east-1:213308312933:LemurTopic\", \"explain\": [ \"allow in inline principal policy: 1\", \"[allow] access granted via x-account identity + resource policies\" ], \"trace\": [ \"(allow) begin: root\", \" begin: evaluating resource policies\", \" begin: evaluating policy: 0\", \" begin: evaluating statement: AllowBlueRole\", \" begin: evaluating Action\", \" using Action block\", \" match: sns:Publish and sns:Publish\", \" end: evaluating Action\", \" begin: evaluating Resource\", \" using Resource block\", ... }","title":"Explain &amp; Trace"},{"location":"simulation/#overlays","text":"For more information about overlays, please refer to Concepts > Overlays Overlays are supported as input files to the yams sim subcommand, allowing you to override entity definitions as needed. Example: Using an overlay yams sim \\ -p arn:aws:iam::777583092761:role/RedRole \\ -r arn:aws:s3:::yams-magenta/secret.txt [ \"s3:DeleteObject\", \"s3:GetObject\", \"s3:ListBucket\", \"s3:PutObject\" ] yams principals \\ -k arn:aws:iam::777583092761:role/RedRole \\ > RedRole.json vim redrole.json # make some edits, add s3:PutObjectAcl permission yams sim \\ -p arn:aws:iam::777583092761:role/RedRole \\ -r arn:aws:s3:::yams-magenta/secret.txt \\ -overlay RedRole.json [ \"s3:DeleteObject\", \"s3:GetObject\", \"s3:ListBucket\", \"s3:PutObject\", \"s3:PutObjectAcl\" ] Note When defining an entity for an overlay, make sure to use the non-frozen version. Overriding managed policy definitions should be accomplished by overwriting the policy itself","title":"Overlays"},{"location":"simulation/#entity-autocomplete","text":"To avoid having excessive copy-pasting of ARNs, yams will attempt to autocomplete any provided ARN fragments into full entity ARNs. If a single match is found, that ARN will be used If multiple matches are found, yams will return an error The return value of the simulation will echo the full Principal and Resource ARNs used. Example: Successful Autocomplete yams sim \\ -p arn:aws:iam::777583092761:role/BlueRole \\ -a sns.publish \\ -r arn:aws:sns:us-east-1:213308312933:LemurTopic \\ can be shortened to: yams sim \\ -p bluerole \\ -a sns.publish \\ -r lemurtopic Example: Failed Autocomplete yams sim -p role -a s3.listbucket -r bucket { \"error\": \"simulation error: error resolving principal for simulation: too many matches for 'role': [arn:aws:iam::777583092761:role/CoralRole arn:aws:iam::213308312933:role/LionRole arn:aws:iam::777583092761:role/TaupeRole arn:aws:iam::213308312933:role/MouseRole arn:aws:iam::213308312933:role/PandaRole arn:aws:iam::255082776537:role/BurgerRole arn:aws:iam::255082776537:role/SushiRole arn:aws:iam::777583092761:role/BlueRole arn:aws:iam::777583092761:role/RedRole arn:aws:iam::777583092761:role/GreenRole]\" }","title":"Entity Autocomplete"},{"location":"simulation/#faq","text":"Q: How do I simulate API actions without resources? A: For actions that do not accept a Resource, you can simply omit it from the command. yams will skip resource-level evaluation and return the simulation result directly. For example, yams sim \\ -p arn:aws:iam::777583092761:role/RedRole \\ -a s3:listallmybuckets Q: I am getting weird results when simulating a \"Create\" API operation A: \"Create\" operations are tricky. While we usually do not think of them as being performed against a resource (after all, they are creating one), IAM authorization does act as if they are. A common use case for this is limiting a Principal to create resources with a specified prefix, which means the authorization decision depends heavily on the name of the resource itself. For example, if you want to model whether or not an IAM role can create a bucket, you would model it as: yams sim \\ -p arn:aws:iam::777583092761:role/RedRole \\ -a s3:CreateBucket \\ -r arn:aws:s3:::my-hypothetical-bucket","title":"FAQ"}]}
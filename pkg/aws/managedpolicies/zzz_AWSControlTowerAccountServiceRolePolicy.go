// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
)

var AWS_MANAGED_POLICY_AWSControlTowerAccountServiceRolePolicy = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "AllowPutRuleOnSpecificSourcesAndDetailTypes", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"events:PutRule"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:events:*:*:rule/*ControlTower*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"ForAnyValue:StringEquals": policy.Condition{"events:source": "aws.securityhub"}, "Null": policy.Condition{"events:detail-type": "false"}, "StringEquals": policy.Condition{"events:ManagedBy": "controltower.amazonaws.com", "events:detail-type": "Security Hub Findings - Imported"}}}, policy.Statement{Sid: "AllowOtherOperationsOnRulesManagedByControlTower", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"events:DeleteRule", "events:EnableRule", "events:DisableRule", "events:PutTargets", "events:RemoveTargets"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:events:*:*:rule/*ControlTower*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"events:ManagedBy": "controltower.amazonaws.com"}}}, policy.Statement{Sid: "AllowDescribeOperationsOnRulesManagedByControlTower", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"events:DescribeRule", "events:ListTargetsByRule"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:events:*:*:rule/*ControlTower*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "AllowControlTowerToPublishSecurityNotifications", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"sns:publish"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:sns:*:*:aws-controltower-AggregateSecurityNotifications"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"aws:PrincipalAccount": "${aws:ResourceAccount}"}}}, policy.Statement{Sid: "AllowActionsForSecurityHubIntegration", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"securityhub:DescribeStandardsControls", "securityhub:GetEnabledStandards"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:securityhub:*:*:hub/default"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock(nil)}}}

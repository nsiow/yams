// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
)

var AWS_MANAGED_POLICY_AmazonMQServiceRolePolicy = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"ec2:DescribeVpcEndpoints"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"ec2:CreateVpcEndpoint"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:ec2:*:*:vpc/*", "arn:aws:ec2:*:*:subnet/*", "arn:aws:ec2:*:*:security-group/*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"ec2:CreateVpcEndpoint"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:ec2:*:*:vpc-endpoint/*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"aws:RequestTag/AMQManaged": "true"}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"ec2:CreateTags"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:ec2:*:*:vpc-endpoint/*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"ec2:CreateAction": "CreateVpcEndpoint"}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"ec2:DeleteVpcEndpoints"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:ec2:*:*:vpc-endpoint/*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"ec2:ResourceTag/AMQManaged": "true"}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"logs:PutLogEvents", "logs:DescribeLogStreams", "logs:DescribeLogGroups", "logs:CreateLogStream", "logs:CreateLogGroup"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:logs:*:*:log-group:/aws/amazonmq/*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock(nil)}}}

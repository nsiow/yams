// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
	"github.com/nsiow/yams/pkg/polystring"
)

var AWS_MANAGED_POLICY_AWSPanoramaServiceRolePolicy = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "PanoramaIoTThingAccess", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"iot:CreateThing", "iot:DeleteThing", "iot:DeleteThingShadow", "iot:DescribeThing", "iot:GetThingShadow", "iot:UpdateThing", "iot:UpdateThingShadow"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:iot:*:*:thing/panorama*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "PanoramaIoTCertificateAccess", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"iot:AttachThingPrincipal", "iot:DetachThingPrincipal", "iot:UpdateCertificate", "iot:DeleteCertificate", "iot:AttachPrincipalPolicy", "iot:DetachPrincipalPolicy"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:iot:*:*:thing/panorama*", "arn:aws:iot:*:*:cert/*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "PanoramaIoTCreateCertificateAndPolicyAccess", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"iot:CreateKeysAndCertificate", "iot:CreatePolicy"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "PanoramaIoTCreatePolicyVersionAccess", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"iot:CreatePolicyVersion"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:iot:*:*:policy/panorama*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "PanoramaIoTJobAccess", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"iot:DescribeJobExecution", "iot:CreateJob", "iot:DeleteJob"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:iot:*:*:job/panorama*", "arn:aws:iot:*:*:thing/panorama*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "PanoramaIoTEndpointAccess", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"iot:DescribeEndpoint"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "PanoramaAccess", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"panorama:Describe*", "panorama:List*", "panorama:Get*"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "PanoramaS3Access", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"s3:GetObject", "s3:PutObject", "s3:DeleteObject", "s3:DeleteBucket", "s3:ListBucket", "s3:GetBucket*", "s3:CreateBucket"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:s3:::*aws-panorama*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "PanoramaIAMPassSageMakerRoleAccess", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"iam:PassRole"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:iam::*:role/AWSPanoramaSageMakerRole", "arn:aws:iam::*:role/service-role/AWSPanoramaSageMakerRole"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString{"StringEquals": polystring.PolyString{""}}}}, policy.Statement{Sid: "PanoramaIAMPassGreengrassRoleAccess", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"iam:PassRole"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:iam::*:role/AWSPanoramaGreengrassGroupRole", "arn:aws:iam::*:role/service-role/AWSPanoramaGreengrassGroupRole", "arn:aws:iam::*:role/AWSPanoramaGreengrassRole", "arn:aws:iam::*:role/service-role/AWSPanoramaGreengrassRole"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString{"StringEquals": polystring.PolyString{""}}}}, policy.Statement{Sid: "PanoramaIAMPassIoTRoleAccess", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"iam:PassRole"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:iam::*:role/AWSPanoramaApplianceRole", "arn:aws:iam::*:role/service-role/AWSPanoramaApplianceRole"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString{"StringEqualsIfExists": polystring.PolyString{""}}}}, policy.Statement{Sid: "PanoramaGreenGrassAccess", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"greengrass:AssociateRoleToGroup", "greengrass:AssociateServiceRoleToAccount", "greengrass:CreateResourceDefinition", "greengrass:CreateResourceDefinitionVersion", "greengrass:CreateCoreDefinition", "greengrass:CreateCoreDefinitionVersion", "greengrass:CreateDeployment", "greengrass:CreateFunctionDefinition", "greengrass:CreateFunctionDefinitionVersion", "greengrass:CreateGroup", "greengrass:CreateGroupCertificateAuthority", "greengrass:CreateGroupVersion", "greengrass:CreateLoggerDefinition", "greengrass:CreateLoggerDefinitionVersion", "greengrass:CreateSubscriptionDefinition", "greengrass:CreateSubscriptionDefinitionVersion", "greengrass:DeleteCoreDefinition", "greengrass:DeleteFunctionDefinition", "greengrass:DeleteResourceDefinition", "greengrass:DeleteGroup", "greengrass:DeleteLoggerDefinition", "greengrass:DeleteSubscriptionDefinition", "greengrass:DisassociateRoleFromGroup", "greengrass:DisassociateServiceRoleFromAccount", "greengrass:GetAssociatedRole", "greengrass:GetConnectivityInfo", "greengrass:GetCoreDefinition", "greengrass:GetCoreDefinitionVersion", "greengrass:GetDeploymentStatus", "greengrass:GetDeviceDefinition", "greengrass:GetDeviceDefinitionVersion", "greengrass:GetFunctionDefinition", "greengrass:GetFunctionDefinitionVersion", "greengrass:GetGroup", "greengrass:GetGroupCertificateAuthority", "greengrass:GetGroupCertificateConfiguration", "greengrass:GetGroupVersion", "greengrass:GetLoggerDefinition", "greengrass:GetLoggerDefinitionVersion", "greengrass:GetResourceDefinition", "greengrass:GetServiceRoleForAccount", "greengrass:GetSubscriptionDefinition", "greengrass:GetSubscriptionDefinitionVersion", "greengrass:ListCoreDefinitionVersions", "greengrass:ListCoreDefinitions", "greengrass:ListDeployments", "greengrass:ListDeviceDefinitionVersions", "greengrass:ListDeviceDefinitions", "greengrass:ListFunctionDefinitionVersions", "greengrass:ListFunctionDefinitions", "greengrass:ListGroupCertificateAuthorities", "greengrass:ListGroupVersions", "greengrass:ListGroups", "greengrass:ListLoggerDefinitionVersions", "greengrass:ListLoggerDefinitions", "greengrass:ListSubscriptionDefinitionVersions", "greengrass:ListSubscriptionDefinitions", "greengrass:ResetDeployments", "greengrass:UpdateConnectivityInfo", "greengrass:UpdateCoreDefinition", "greengrass:UpdateDeviceDefinition", "greengrass:UpdateFunctionDefinition", "greengrass:UpdateGroup", "greengrass:UpdateGroupCertificateConfiguration", "greengrass:UpdateLoggerDefinition", "greengrass:UpdateSubscriptionDefinition", "greengrass:UpdateResourceDefinition"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "PanoramaLambdaUsersFunctionAccess", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"lambda:GetFunction", "lambda:GetFunctionConfiguration", "lambda:ListFunctions", "lambda:ListVersionsByFunction"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:lambda:*:*:function:*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "PanoramaSageMakerWriteAccess", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"sagemaker:CreateTrainingJob", "sagemaker:StopTrainingJob", "sagemaker:CreateCompilationJob", "sagemaker:DescribeCompilationJob", "sagemaker:StopCompilationJob"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:sagemaker:*:*:training-job/panorama*", "arn:aws:sagemaker:*:*:compilation-job/panorama*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "PanoramaSageMakerListAccess", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"sagemaker:ListCompilationJobs"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "PanoramaSageMakerReadAccess", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"sagemaker:DescribeTrainingJob"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:sagemaker:*:*:training-job/*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "PanoramaCWLogsAccess", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"iot:AttachPolicy", "iot:CreateRoleAlias"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:iot:*:*:policy/panorama*", "arn:aws:iot:*:*:rolealias/panorama*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}}}

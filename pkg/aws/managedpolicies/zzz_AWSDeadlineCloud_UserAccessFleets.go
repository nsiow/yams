// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
)

var AWS_MANAGED_POLICY_AWSDeadlineCloud_UserAccessFleets = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "AdditionalPermissions", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"identitystore:DescribeGroup", "identitystore:DescribeUser", "identitystore:ListGroupMembershipsForMember", "deadline:GetApplicationVersion", "ec2:DescribeInstanceTypes", "identitystore:ListUsers"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "OwnerLevelPermissions", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"deadline:AssociateMemberToFleet", "deadline:DisassociateMemberFromFleet"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"ForAnyValue:StringEquals": policy.Condition{"deadline:FleetMembershipLevels": []interface{}{"OWNER"}}}}, policy.Statement{Sid: "ManagerLevelMemberAssociation", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"deadline:AssociateMemberToFleet"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"ForAnyValue:StringEquals": policy.Condition{"deadline:FleetMembershipLevels": []interface{}{"MANAGER"}}, "StringEquals": policy.Condition{"deadline:AssociatedMembershipLevel": []interface{}{"MANAGER", "CONTRIBUTOR", "VIEWER", ""}, "deadline:MembershipLevel": []interface{}{"MANAGER", "CONTRIBUTOR", "VIEWER"}}}}, policy.Statement{Sid: "ManagerLevelMemberDisassociation", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"deadline:DisassociateMemberFromFleet"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"ForAnyValue:StringEquals": policy.Condition{"deadline:FleetMembershipLevels": []interface{}{"MANAGER"}}, "StringEquals": policy.Condition{"deadline:AssociatedMembershipLevel": []interface{}{"MANAGER", "CONTRIBUTOR", "VIEWER", ""}}}}, policy.Statement{Sid: "OwnerManagerPermissions", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"deadline:ListFleetMembers"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"ForAnyValue:StringEquals": policy.Condition{"deadline:FleetMembershipLevels": []interface{}{"OWNER", "MANAGER"}}}}, policy.Statement{Sid: "AllLevelsPermissions", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"deadline:AssumeFleetRoleForRead", "deadline:GetFleet", "deadline:GetQueueFleetAssociation", "deadline:GetWorker", "deadline:ListQueueFleetAssociations", "deadline:ListSessionsForWorker", "deadline:ListWorkers", "deadline:SearchWorkers"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"ForAnyValue:StringEquals": policy.Condition{"deadline:FleetMembershipLevels": []interface{}{"OWNER", "MANAGER", "CONTRIBUTOR", "VIEWER"}}}}, policy.Statement{Sid: "ListBasedOnMembership", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"deadline:ListFleets"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"deadline:RequesterPrincipalId": "${deadline:PrincipalId}"}}}}}

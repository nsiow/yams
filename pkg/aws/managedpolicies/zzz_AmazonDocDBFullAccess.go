// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
	"github.com/nsiow/yams/pkg/polystring"
)

var AWS_MANAGED_POLICY_AmazonDocDBFullAccess = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"rds:AddRoleToDBCluster", "rds:AddSourceIdentifierToSubscription", "rds:AddTagsToResource", "rds:ApplyPendingMaintenanceAction", "rds:CopyDBClusterParameterGroup", "rds:CopyDBClusterSnapshot", "rds:CopyDBParameterGroup", "rds:CreateDBCluster", "rds:CreateDBClusterParameterGroup", "rds:CreateDBClusterSnapshot", "rds:CreateDBInstance", "rds:CreateDBParameterGroup", "rds:CreateDBSubnetGroup", "rds:CreateEventSubscription", "rds:DeleteDBCluster", "rds:DeleteDBClusterParameterGroup", "rds:DeleteDBClusterSnapshot", "rds:DeleteDBInstance", "rds:DeleteDBParameterGroup", "rds:DeleteDBSubnetGroup", "rds:DeleteEventSubscription", "rds:DescribeAccountAttributes", "rds:DescribeCertificates", "rds:DescribeDBClusterParameterGroups", "rds:DescribeDBClusterParameters", "rds:DescribeDBClusterSnapshotAttributes", "rds:DescribeDBClusterSnapshots", "rds:DescribeDBClusters", "rds:DescribeDBEngineVersions", "rds:DescribeDBInstances", "rds:DescribeDBLogFiles", "rds:DescribeDBParameterGroups", "rds:DescribeDBParameters", "rds:DescribeDBSecurityGroups", "rds:DescribeDBSubnetGroups", "rds:DescribeEngineDefaultClusterParameters", "rds:DescribeEngineDefaultParameters", "rds:DescribeEventCategories", "rds:DescribeEventSubscriptions", "rds:DescribeEvents", "rds:DescribeOptionGroups", "rds:DescribeOrderableDBInstanceOptions", "rds:DescribePendingMaintenanceActions", "rds:DescribeValidDBInstanceModifications", "rds:DownloadDBLogFilePortion", "rds:FailoverDBCluster", "rds:ListTagsForResource", "rds:ModifyDBCluster", "rds:ModifyDBClusterParameterGroup", "rds:ModifyDBClusterSnapshotAttribute", "rds:ModifyDBInstance", "rds:ModifyDBParameterGroup", "rds:ModifyDBSubnetGroup", "rds:ModifyEventSubscription", "rds:PromoteReadReplicaDBCluster", "rds:RebootDBInstance", "rds:RemoveRoleFromDBCluster", "rds:RemoveSourceIdentifierFromSubscription", "rds:RemoveTagsFromResource", "rds:ResetDBClusterParameterGroup", "rds:ResetDBParameterGroup", "rds:RestoreDBClusterFromSnapshot", "rds:RestoreDBClusterToPointInTime"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"cloudwatch:GetMetricStatistics", "cloudwatch:ListMetrics", "ec2:DescribeAccountAttributes", "ec2:DescribeAvailabilityZones", "ec2:DescribeSecurityGroups", "ec2:DescribeSubnets", "ec2:DescribeVpcAttribute", "ec2:DescribeVpcs", "kms:ListAliases", "kms:ListKeyPolicies", "kms:ListKeys", "kms:ListRetirableGrants", "logs:DescribeLogStreams", "logs:GetLogEvents", "sns:ListSubscriptions", "sns:ListTopics", "sns:Publish"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"iam:CreateServiceLinkedRole"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString{"StringLike": polystring.PolyString{""}}}}}}

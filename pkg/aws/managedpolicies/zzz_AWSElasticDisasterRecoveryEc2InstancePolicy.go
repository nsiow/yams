// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
)

var AWS_MANAGED_POLICY_AWSElasticDisasterRecoveryEc2InstancePolicy = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "DRSEc2InstancePolicy1", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"drs:GetAgentInstallationAssetsForDrs", "drs:SendClientLogsForDrs", "drs:SendClientMetricsForDrs", "drs:CreateSourceServerForDrs", "drs:CreateSourceNetwork"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "DRSEc2InstancePolicy2", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"drs:TagResource"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:drs:*:*:source-server/*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"drs:CreateAction": policy.ConditionValue{bools: []bool(nil), numbers: []int(nil), strings: []string{"CreateSourceServerForDrs"}}}}}, policy.Statement{Sid: "DRSEc2InstancePolicy3", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"drs:TagResource"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:drs:*:*:source-network/*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"drs:CreateAction": policy.ConditionValue{bools: []bool(nil), numbers: []int(nil), strings: []string{"CreateSourceNetwork"}}}}}, policy.Statement{Sid: "DRSEc2InstancePolicy4", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"drs:SendAgentMetricsForDrs", "drs:SendAgentLogsForDrs", "drs:UpdateAgentSourcePropertiesForDrs", "drs:UpdateAgentReplicationInfoForDrs", "drs:UpdateAgentConversionInfoForDrs", "drs:GetAgentCommandForDrs", "drs:GetAgentConfirmedResumeInfoForDrs", "drs:GetAgentRuntimeConfigurationForDrs", "drs:UpdateAgentBacklogForDrs", "drs:GetAgentReplicationInfoForDrs"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:drs:*:*:source-server/*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "DRSEc2InstancePolicy5", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"sts:AssumeRole", "sts:TagSession"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:iam::*:role/service-role/DRSCrossAccountAgentAuthorizedRole_*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"ForAnyValue:StringEquals": policy.Condition{"sts:TransitiveTagKeys": policy.ConditionValue{bools: []bool(nil), numbers: []int(nil), strings: []string{"SourceInstanceARN"}}}, "StringLike": policy.Condition{"aws:RequestTag/SourceInstanceARN": policy.ConditionValue{bools: []bool(nil), numbers: []int(nil), strings: []string{"${ec2:SourceInstanceARN}"}}}}}}}

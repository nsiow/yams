// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
)

var AWS_MANAGED_POLICY_AWSMarketplaceResaleAuthorizationServiceRolePolicy = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "AllowResaleAuthorizationShareActionsRAMCreate", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"ram:CreateResourceShare"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:ram:*:*:*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"ArnLike": policy.Condition{"ram:ResourceArn": policy.ConditionValue{bools: []bool(nil), numbers: []int(nil), strings: []string{"arn:aws:aws-marketplace:*:*:AWSMarketplace/ResaleAuthorization/*"}}}, "Null": policy.Condition{"ram:Principal": policy.ConditionValue{bools: []bool(nil), numbers: []int(nil), strings: []string{"true"}}}, "StringEquals": policy.Condition{"ram:RequestedResourceType": policy.ConditionValue{bools: []bool(nil), numbers: []int(nil), strings: []string{"aws-marketplace:Entity"}}}}}, policy.Statement{Sid: "AllowResaleAuthorizationShareActionsRAMAssociate", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"ram:AssociateResourceShare"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:ram:*:*:*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"Null": policy.Condition{"ram:Principal": policy.ConditionValue{bools: []bool(nil), numbers: []int(nil), strings: []string{"false"}}}, "StringEquals": policy.Condition{"ram:ResourceShareName": policy.ConditionValue{bools: []bool(nil), numbers: []int(nil), strings: []string{"AWSMarketplaceResaleAuthorization"}}}}}, policy.Statement{Sid: "AllowResaleAuthorizationShareActionsRAMAccept", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"ram:AcceptResourceShareInvitation"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:ram:*:*:*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"ram:ResourceShareName": policy.ConditionValue{bools: []bool(nil), numbers: []int(nil), strings: []string{"AWSMarketplaceResaleAuthorization"}}}}}, policy.Statement{Sid: "AllowResaleAuthorizationShareActionsRAMGet", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"ram:GetResourceShareInvitations", "ram:GetResourceShareAssociations"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:ram:*:*:*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "AllowResaleAuthorizationShareActionsMarketplace", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"aws-marketplace:PutResourcePolicy", "aws-marketplace:GetResourcePolicy"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:aws-marketplace:*:*:AWSMarketplace/ResaleAuthorization/*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"ForAnyValue:StringEquals": policy.Condition{"aws:CalledVia": policy.ConditionValue{bools: []bool(nil), numbers: []int(nil), strings: []string{"ram.amazonaws.com"}}}}}, policy.Statement{Sid: "AllowResaleAuthorizationShareActionsMarketplaceDescribe", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"aws-marketplace:DescribeEntity"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:aws-marketplace:*:*:AWSMarketplace/ResaleAuthorization/*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock(nil)}}}

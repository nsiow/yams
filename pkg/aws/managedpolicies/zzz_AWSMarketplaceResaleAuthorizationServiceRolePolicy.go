// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
)

var AWS_MANAGED_POLICY_AWSMarketplaceResaleAuthorizationServiceRolePolicy = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "AllowResaleAuthorizationShareActionsRAMCreate", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"ram:CreateResourceShare"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ram:*:*:*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue{"ArnLike": map[string]policy.ConditionValue{"ram:ResourceArn": "arn:aws:aws-marketplace:*:*:AWSMarketplace/ResaleAuthorization/*"}, "Null": map[string]policy.ConditionValue{"ram:Principal": "true"}, "StringEquals": map[string]policy.ConditionValue{"ram:RequestedResourceType": "aws-marketplace:Entity"}}}, policy.Statement{Sid: "AllowResaleAuthorizationShareActionsRAMAssociate", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"ram:AssociateResourceShare"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ram:*:*:*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue{"Null": map[string]policy.ConditionValue{"ram:Principal": "false"}, "StringEquals": map[string]policy.ConditionValue{"ram:ResourceShareName": "AWSMarketplaceResaleAuthorization"}}}, policy.Statement{Sid: "AllowResaleAuthorizationShareActionsRAMAccept", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"ram:AcceptResourceShareInvitation"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ram:*:*:*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue{"StringEquals": map[string]policy.ConditionValue{"ram:ResourceShareName": "AWSMarketplaceResaleAuthorization"}}}, policy.Statement{Sid: "AllowResaleAuthorizationShareActionsRAMGet", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"ram:GetResourceShareInvitations", "ram:GetResourceShareAssociations"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ram:*:*:*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue(nil)}, policy.Statement{Sid: "AllowResaleAuthorizationShareActionsMarketplace", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"aws-marketplace:PutResourcePolicy", "aws-marketplace:GetResourcePolicy"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:aws-marketplace:*:*:AWSMarketplace/ResaleAuthorization/*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue{"ForAnyValue:StringEquals": map[string]policy.ConditionValue{"aws:CalledVia": []interface{}{"ram.amazonaws.com"}}}}, policy.Statement{Sid: "AllowResaleAuthorizationShareActionsMarketplaceDescribe", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"aws-marketplace:DescribeEntity"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:aws-marketplace:*:*:AWSMarketplace/ResaleAuthorization/*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue(nil)}}}

// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
)

var AWS_MANAGED_POLICY_AWSEC2VssSnapshotPolicy = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "DescribeInstanceInfo", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"ec2:DescribeInstanceAttribute"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ec2:*:*:instance/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringLike": policy.Condition{"ec2:SourceInstanceARN": "*${ec2:InstanceId}"}}}, policy.Statement{Sid: "CreateSnapshotsWithTag", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"ec2:CreateSnapshots"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ec2:*:*:snapshot/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringLike": policy.Condition{"aws:RequestTag/AwsVssConfig": "*"}}}, policy.Statement{Sid: "CreateSnapshotsAccessInstance", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"ec2:CreateSnapshots"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ec2:*:*:instance/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringLike": policy.Condition{"ec2:SourceInstanceARN": "*${ec2:InstanceId}"}}}, policy.Statement{Sid: "CreateSnapshotsAccessVolume", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"ec2:CreateSnapshots"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ec2:*:*:volume/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "CreateImageWithTag", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"ec2:CreateImage"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ec2:*:*:snapshot/*", "arn:aws:ec2:*:*:image/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringLike": policy.Condition{"aws:RequestTag/AwsVssConfig": "*"}}}, policy.Statement{Sid: "CreateImageAccessInstance", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"ec2:CreateImage"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ec2:*:*:instance/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringLike": policy.Condition{"ec2:SourceInstanceARN": "*${ec2:InstanceId}"}}}, policy.Statement{Sid: "CreateTagsOnResourceCreation", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"ec2:CreateTags"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ec2:*:*:snapshot/*", "arn:aws:ec2:*:*:image/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"ec2:CreateAction": []interface{}{"CreateImage", "CreateSnapshots"}}}}, policy.Statement{Sid: "CreateTagsAfterResourceCreation", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"ec2:CreateTags"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ec2:*:*:snapshot/*", "arn:aws:ec2:*:*:image/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"ForAllValues:StringEquals": policy.Condition{"aws:TagKeys": []interface{}{"AppConsistent", "Device"}}, "StringLike": policy.Condition{"ec2:ResourceTag/AwsVssConfig": "*"}}}, policy.Statement{Sid: "DescribeImagesAndSnapshots", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"ec2:DescribeImages", "ec2:DescribeSnapshots"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock(nil)}}}

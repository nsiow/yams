// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
)

var AWS_MANAGED_POLICY_AwsGlueSessionUserRestrictedPolicy = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"glue:CreateSession"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:glue:*:*:session/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"ForAnyValue:StringEquals": policy.Condition{"aws:TagKeys": []interface{}{"owner"}}, "StringEquals": policy.Condition{"aws:RequestTag/owner": "${aws:userid}"}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"glue:RunStatement", "glue:GetStatement", "glue:ListStatements", "glue:CancelStatement", "glue:StopSession", "glue:DeleteSession", "glue:GetSession"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:glue:*:*:session/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"aws:ResourceTag/owner": "${aws:userid}"}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"glue:ListSessions"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Deny", Action: policy.Value{"glue:TagResource", "glue:UntagResource", "tag:TagResources", "tag:UntagResources"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:glue:*:*:session/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"ForAnyValue:StringEquals": policy.Condition{"aws:TagKeys": []interface{}{"owner"}}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"iam:PassRole"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:iam::*:role/service-role/AwsGlueSessionServiceRoleUserRestricted*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringLike": policy.Condition{"iam:PassedToService": []interface{}{"glue.amazonaws.com"}}}}}}

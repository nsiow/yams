// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
)

var AWS_MANAGED_POLICY_AWSServiceRolePolicyForBackupRestoreTesting = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "BackupActions", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"backup:DescribeRecoveryPoint", "backup:DescribeRestoreJob", "backup:DescribeProtectedResource", "backup:GetRecoveryPointRestoreMetadata", "backup:ListBackupVaults", "backup:ListProtectedResources", "backup:ListProtectedResourcesByBackupVault", "backup:ListRecoveryPointsByBackupVault", "backup:ListRecoveryPointsByResource", "backup:ListTags", "backup:StartRestoreJob"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue(nil)}, policy.Statement{Sid: "IamPassRole", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"iam:PassRole"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue{"StringEquals": map[string]policy.ConditionValue{"iam:PassedToService": "backup.amazonaws.com"}}}, policy.Statement{Sid: "DescribeActions", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"ec2:DescribeInstances", "ec2:DescribeSnapshotTierStatus", "ec2:DescribeTags", "ec2:DescribeVolumes", "elasticfilesystem:DescribeFileSystems", "elasticfilesystem:DescribeMountTargets", "fsx:DescribeFileSystems", "fsx:DescribeVolumes", "fsx:ListTagsForResource", "rds:DescribeDBInstances", "rds:DescribeDBClusters", "rds:DescribeDBInstanceAutomatedBackups", "rds:DescribeDBClusterAutomatedBackups", "rds:ListTagsForResource", "redshift:DescribeClusters"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue(nil)}, policy.Statement{Sid: "DeleteActions", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"ec2:DeleteVolume", "ec2:TerminateInstances", "elasticfilesystem:DeleteFilesystem", "elasticfilesystem:DeleteMountTarget", "rds:DeleteDBCluster", "rds:DeleteDBInstance", "fsx:DeleteFileSystem", "fsx:DeleteVolume"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue{"Null": map[string]policy.ConditionValue{"aws:ResourceTag/awsbackup-restore-test": "false"}}}, policy.Statement{Sid: "DdbDeleteActions", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"dynamodb:DeleteTable", "dynamodb:DescribeTable"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:dynamodb:*:*:table/awsbackup-restore-test-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue{"StringEquals": map[string]policy.ConditionValue{"aws:ResourceAccount": "${aws:PrincipalAccount}"}}}, policy.Statement{Sid: "RedshiftDeleteActions", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"redshift:DeleteCluster"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:redshift:*:*:cluster:awsbackup-restore-test-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue(nil)}, policy.Statement{Sid: "S3DeleteActions", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"s3:DeleteBucket", "s3:GetLifecycleConfiguration", "s3:PutLifecycleConfiguration"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:s3:::awsbackup-restore-test-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue{"StringEquals": map[string]policy.ConditionValue{"aws:ResourceAccount": "${aws:PrincipalAccount}"}}}, policy.Statement{Sid: "TimestreamDeleteActions", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"timestream:DeleteTable"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:timestream:*:*:database/*/table/awsbackup-restore-test-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue(nil)}}}

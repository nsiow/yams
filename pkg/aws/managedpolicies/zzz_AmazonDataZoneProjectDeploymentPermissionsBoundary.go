// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
)

var AWS_MANAGED_POLICY_AmazonDataZoneProjectDeploymentPermissionsBoundary = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"iam:CreateRole", "iam:DetachRolePolicy", "iam:DeleteRolePolicy", "iam:AttachRolePolicy", "iam:PutRolePolicy"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:iam::*:role/*datazone*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"iam:PermissionsBoundary": "arn:aws:iam::aws:policy/AmazonDataZoneProjectRolePermissionsBoundary"}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"iam:DeleteRole"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:iam::*:role/*datazone*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"kms:CreateKey", "kms:TagResource", "athena:CreateWorkGroup", "athena:TagResource", "iam:TagRole", "iam:TagPolicy", "logs:CreateLogGroup", "logs:TagLogGroup", "ssm:AddTagsToResource"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"ForAnyValue:StringLike": policy.Condition{"aws:TagKeys": "datazone:*"}, "StringLike": policy.Condition{"aws:ResourceTag/datazone:projectId": "proj-*"}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"athena:DeleteWorkGroup", "kms:ScheduleKeyDeletion", "kms:DescribeKey", "kms:EnableKeyRotation", "kms:DisableKeyRotation", "kms:GenerateDataKey", "kms:Encrypt", "kms:Decrypt", "ec2:AuthorizeSecurityGroupEgress", "ec2:AuthorizeSecurityGroupIngress"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"StringLike": policy.Condition{"aws:ResourceTag/datazone:projectId": "proj-*"}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"ec2:CreateTags"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"ForAnyValue:StringLike": policy.Condition{"aws:TagKeys": "datazone:projectId"}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"iam:DeletePolicy", "s3:DeleteBucket"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:iam::*:policy/datazone*", "arn:aws:s3:::datazone*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"ssm:GetParameter*", "ssm:PutParameter", "ssm:DeleteParameter"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:ssm:*:*:parameter/*datazone*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"iam:GetRole", "iam:GetPolicy", "iam:GetRolePolicy", "iam:CreatePolicy", "iam:ListPolicyVersions", "lakeformation:RegisterResource", "lakeformation:DeregisterResource", "lakeformation:GrantPermissions", "lakeformation:PutDataLakeSettings", "lakeformation:GetDataLakeSettings", "lakeformation:RevokePermissions", "lakeformation:ListPermissions", "glue:CreateDatabase", "glue:DeleteDatabase", "glue:GetDatabases", "glue:GetDatabase", "sts:GetCallerIdentity"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"iam:PassRole"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:iam::*:role/*datazone*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"s3:PutEncryptionConfiguration", "s3:PutBucketPublicAccessBlock", "s3:DeleteBucketPolicy", "s3:CreateBucket", "s3:PutBucketPolicy", "s3:PutBucketAcl", "s3:PutBucketVersioning", "s3:PutBucketTagging", "s3:PutBucketLogging", "s3:GetObject*", "s3:GetBucket*", "s3:List*", "s3:GetEncryptionConfiguration", "s3:DeleteObject*", "s3:PutObject*", "s3:Abort*"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:s3:::*datazone*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"aws:ResourceAccount": "${aws:PrincipalAccount}"}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"athena:Get*", "athena:List*", "ec2:CreateSecurityGroup", "ec2:RevokeSecurityGroupEgress", "ec2:DeleteSecurityGroup", "ec2:Describe*", "ec2:Get*", "ec2:List*", "logs:PutRetentionPolicy", "logs:DescribeLogGroups", "logs:DeleteLogGroup", "logs:DeleteRetentionPolicy"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"kms:PutKeyPolicy"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"ForAnyValue:StringEquals": policy.Condition{"aws:CalledVia": []interface{}{"cloudformation.amazonaws.com"}}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"ec2:CreateVpcEndpoint"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value(nil)}, NotResource: policy.Resource{Value: policy.Value{"arn:aws:ec2:*:*:vpc-endpoint/*"}}, Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"ec2:CreateVpcEndpoint"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:ec2:*:*:vpc-endpoint/*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"StringLike": policy.Condition{"ec2:VpceServiceName": []interface{}{"com.amazonaws.*.logs", "com.amazonaws.*.s3", "com.amazonaws.*.glue", "com.amazonaws.*.athena"}}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"cloudformation:DescribeStacks", "cloudformation:DescribeStackEvents", "cloudformation:GetTemplate", "cloudformation:DescribeChangeSet", "cloudformation:CreateChangeSet", "cloudformation:ExecuteChangeSet", "cloudformation:DeleteChangeSet", "cloudformation:CreateStack", "cloudformation:UpdateStack", "cloudformation:DeleteStack", "cloudformation:TagResource", "cloudformation:GetTemplateSummary"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:cloudformation:*:*:stack/DataZone*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Deny", Action: policy.Action{Value: policy.Value{"s3:GetObject*", "s3:GetBucket*", "s3:List*", "s3:GetEncryptionConfiguration", "s3:DeleteObject*", "s3:PutObject*", "s3:Abort*", "s3:DeleteBucket"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value(nil)}, NotResource: policy.Resource{Value: policy.Value{"arn:aws:s3:::*datazone*"}}, Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Deny", Action: policy.Action{Value: policy.Value{"kms:*"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"StringNotEquals": policy.Condition{"aws:ResourceAccount": "${aws:PrincipalAccount}"}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Deny", Action: policy.Action{Value: policy.Value(nil)}, NotAction: policy.Action{Value: policy.Value{"ssm:PutParameter", "ssm:DeleteParameter", "ssm:AddTagsToResource", "ssm:GetParameters", "ssm:GetParameter", "s3:PutEncryptionConfiguration", "s3:PutBucketPublicAccessBlock", "s3:DeleteBucketPolicy", "s3:CreateBucket", "s3:PutBucketAcl", "s3:PutBucketPolicy", "s3:PutBucketVersioning", "s3:PutBucketTagging", "s3:ListBucket", "s3:PutBucketLogging", "s3:DeleteBucket", "iam:GetRole", "iam:GetRolePolicy", "iam:GetPolicy", "iam:CreatePolicy", "iam:ListPolicyVersions", "iam:DeletePolicy", "cloudformation:DescribeStacks", "cloudformation:DescribeStackEvents", "cloudformation:GetTemplate", "cloudformation:DescribeChangeSet", "cloudformation:CreateChangeSet", "cloudformation:ExecuteChangeSet", "cloudformation:DeleteChangeSet", "cloudformation:TagResource", "cloudformation:CreateStack", "cloudformation:UpdateStack", "cloudformation:DeleteStack", "cloudformation:GetTemplateSummary", "athena:*", "kms:*", "glue:CreateDatabase", "glue:DeleteDatabase", "glue:GetDatabases", "glue:GetDatabase", "lambda:*", "ec2:*", "logs:*", "servicecatalog:CreateApplication", "servicecatalog:DeleteApplication", "servicecatalog:GetApplication", "lakeformation:RegisterResource", "lakeformation:DeregisterResource", "lakeformation:GrantPermissions", "lakeformation:PutDataLakeSettings", "lakeformation:RevokePermissions", "lakeformation:GetDataLakeSettings", "lakeformation:ListPermissions", "iam:CreateRole", "iam:DeleteRole", "iam:DetachRolePolicy", "iam:DeleteRolePolicy", "iam:AttachRolePolicy", "iam:PutRolePolicy", "iam:UntagRole", "iam:PassRole", "iam:TagRole", "s3:GetBucket*", "s3:GetObject*", "s3:Abort*", "s3:GetEncryptionConfiguration", "s3:PutObject*"}}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock(nil)}}}

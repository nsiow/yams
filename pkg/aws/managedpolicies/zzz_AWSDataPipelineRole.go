// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
	"github.com/nsiow/yams/pkg/polystring"
)

var AWS_MANAGED_POLICY_AWSDataPipelineRole = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{Values: []policy.Statement{policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString{Values: []string(nil)}, Federated: polystring.PolyString{Values: []string(nil)}, Service: polystring.PolyString{Values: []string(nil)}, CanonicalUser: polystring.PolyString{Values: []string(nil)}}, NotPrincipal: policy.Principal{AWS: polystring.PolyString{Values: []string(nil)}, Federated: polystring.PolyString{Values: []string(nil)}, Service: polystring.PolyString{Values: []string(nil)}, CanonicalUser: polystring.PolyString{Values: []string(nil)}}, Action: policy.Action{PolyString: polystring.PolyString{Values: []string{"cloudwatch:*", "datapipeline:DescribeObjects", "datapipeline:EvaluateExpression", "dynamodb:BatchGetItem", "dynamodb:DescribeTable", "dynamodb:GetItem", "dynamodb:Query", "dynamodb:Scan", "dynamodb:UpdateTable", "ec2:AuthorizeSecurityGroupIngress", "ec2:CancelSpotInstanceRequests", "ec2:CreateSecurityGroup", "ec2:CreateTags", "ec2:DeleteTags", "ec2:Describe*", "ec2:ModifyImageAttribute", "ec2:ModifyInstanceAttribute", "ec2:RequestSpotInstances", "ec2:RunInstances", "ec2:StartInstances", "ec2:StopInstances", "ec2:TerminateInstances", "ec2:AuthorizeSecurityGroupEgress", "ec2:DeleteSecurityGroup", "ec2:RevokeSecurityGroupEgress", "ec2:DescribeNetworkInterfaces", "ec2:CreateNetworkInterface", "ec2:DeleteNetworkInterface", "ec2:DetachNetworkInterface", "elasticmapreduce:*", "iam:GetInstanceProfile", "iam:GetRole", "iam:GetRolePolicy", "iam:ListAttachedRolePolicies", "iam:ListRolePolicies", "iam:ListInstanceProfiles", "iam:PassRole", "rds:DescribeDBInstances", "rds:DescribeDBSecurityGroups", "redshift:DescribeClusters", "redshift:DescribeClusterSecurityGroups", "s3:CreateBucket", "s3:DeleteObject", "s3:Get*", "s3:List*", "s3:Put*", "sdb:BatchPutAttributes", "sdb:Select*", "sns:GetTopicAttributes", "sns:ListTopics", "sns:Publish", "sns:Subscribe", "sns:Unsubscribe", "sqs:CreateQueue", "sqs:Delete*", "sqs:GetQueue*", "sqs:PurgeQueue", "sqs:ReceiveMessage"}}}, NotAction: policy.Action{PolyString: polystring.PolyString{Values: []string(nil)}}, Resource: policy.Resource{PolyString: polystring.PolyString{Values: []string{"*"}}}, NotResource: policy.Resource{PolyString: polystring.PolyString{Values: []string(nil)}}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString{Values: []string(nil)}, Federated: polystring.PolyString{Values: []string(nil)}, Service: polystring.PolyString{Values: []string(nil)}, CanonicalUser: polystring.PolyString{Values: []string(nil)}}, NotPrincipal: policy.Principal{AWS: polystring.PolyString{Values: []string(nil)}, Federated: polystring.PolyString{Values: []string(nil)}, Service: polystring.PolyString{Values: []string(nil)}, CanonicalUser: polystring.PolyString{Values: []string(nil)}}, Action: policy.Action{PolyString: polystring.PolyString{Values: []string{"iam:CreateServiceLinkedRole"}}}, NotAction: policy.Action{PolyString: polystring.PolyString{Values: []string(nil)}}, Resource: policy.Resource{PolyString: polystring.PolyString{Values: []string{"\"*\""}}}, NotResource: policy.Resource{PolyString: polystring.PolyString{Values: []string(nil)}}, Condition: policy.Condition{Map: map[string]polystring.PolyString{"StringLike": polystring.PolyString{Values: []string{"{\n              \"iam:AWSServiceName\": [\n                \"elasticmapreduce.amazonaws.com\",\n                \"spot.amazonaws.com\"\n              ]\n            }"}}}}}}}}

// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
)

var AWS_MANAGED_POLICY_AWSDeadlineCloud_UserAccessJobs = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "AdditionalPermissions", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"identitystore:DescribeGroup", "identitystore:DescribeUser", "identitystore:ListGroupMembershipsForMember", "deadline:GetApplicationVersion", "ec2:DescribeInstanceTypes", "identitystore:ListUsers"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "OwnerLevelPermissions", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"deadline:AssociateMemberToJob", "deadline:DisassociateMemberFromJob"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"ForAnyValue:StringEquals": policy.Condition{"deadline:JobMembershipLevels": policy.ConditionValue{bools: []bool(nil), numbers: []int(nil), strings: []string{"OWNER"}}}}}, policy.Statement{Sid: "ManagerLevelMemberAssociation", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"deadline:AssociateMemberToJob"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"ForAnyValue:StringEquals": policy.Condition{"deadline:JobMembershipLevels": policy.ConditionValue{bools: []bool(nil), numbers: []int(nil), strings: []string{"MANAGER"}}}, "StringEquals": policy.Condition{"deadline:AssociatedMembershipLevel": policy.ConditionValue{bools: []bool(nil), numbers: []int(nil), strings: []string{"MANAGER", "CONTRIBUTOR", "VIEWER", ""}}, "deadline:MembershipLevel": policy.ConditionValue{bools: []bool(nil), numbers: []int(nil), strings: []string{"MANAGER", "CONTRIBUTOR", "VIEWER"}}}}}, policy.Statement{Sid: "ManagerLevelMemberDisassociation", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"deadline:DisassociateMemberFromJob"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"ForAnyValue:StringEquals": policy.Condition{"deadline:JobMembershipLevels": policy.ConditionValue{bools: []bool(nil), numbers: []int(nil), strings: []string{"MANAGER"}}}, "StringEquals": policy.Condition{"deadline:AssociatedMembershipLevel": policy.ConditionValue{bools: []bool(nil), numbers: []int(nil), strings: []string{"MANAGER", "CONTRIBUTOR", "VIEWER", ""}}}}}, policy.Statement{Sid: "OwnerManagerPermissions", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"deadline:ListJobMembers", "deadline:UpdateJob", "deadline:UpdateSession", "deadline:UpdateStep", "deadline:UpdateTask"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"ForAnyValue:StringEquals": policy.Condition{"deadline:JobMembershipLevels": policy.ConditionValue{bools: []bool(nil), numbers: []int(nil), strings: []string{"OWNER", "MANAGER"}}}}}, policy.Statement{Sid: "AllLevelsPermissions", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"deadline:GetJob", "deadline:GetSession", "deadline:GetSessionAction", "deadline:GetStep", "deadline:GetTask", "deadline:ListSessionActions", "deadline:ListSessions", "deadline:ListStepConsumers", "deadline:ListStepDependencies", "deadline:ListSteps", "deadline:ListTasks", "deadline:SearchSteps", "deadline:SearchTasks"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"ForAnyValue:StringEquals": policy.Condition{"deadline:JobMembershipLevels": policy.ConditionValue{bools: []bool(nil), numbers: []int(nil), strings: []string{"OWNER", "MANAGER", "CONTRIBUTOR", "VIEWER"}}}}}, policy.Statement{Sid: "ListBasedOnMembership", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"deadline:ListJobs"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"deadline:RequesterPrincipalId": policy.ConditionValue{bools: []bool(nil), numbers: []int(nil), strings: []string{"${deadline:PrincipalId}"}}}}}}}

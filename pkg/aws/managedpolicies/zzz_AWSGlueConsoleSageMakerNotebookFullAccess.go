// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
)

var AWS_MANAGED_POLICY_AWSGlueConsoleSageMakerNotebookFullAccess = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"glue:*", "redshift:DescribeClusters", "redshift:DescribeClusterSubnetGroups", "iam:ListRoles", "iam:ListRolePolicies", "iam:GetRole", "iam:GetRolePolicy", "iam:ListAttachedRolePolicies", "ec2:DescribeSecurityGroups", "ec2:DescribeSubnets", "ec2:DescribeVpcs", "ec2:DescribeVpcEndpoints", "ec2:DescribeRouteTables", "ec2:DescribeVpcAttribute", "ec2:DescribeKeyPairs", "ec2:DescribeInstances", "ec2:DescribeImages", "ec2:CreateNetworkInterface", "ec2:AttachNetworkInterface", "ec2:ModifyNetworkInterfaceAttribute", "ec2:DeleteNetworkInterface", "ec2:DescribeAvailabilityZones", "ec2:DescribeInternetGateways", "ec2:DescribeNetworkInterfaces", "rds:DescribeDBInstances", "s3:ListAllMyBuckets", "s3:ListBucket", "s3:GetBucketAcl", "s3:GetBucketLocation", "cloudformation:DescribeStacks", "cloudformation:GetTemplateSummary", "dynamodb:ListTables", "kms:ListAliases", "kms:DescribeKey", "sagemaker:ListNotebookInstances", "cloudformation:ListStacks", "cloudwatch:GetMetricData", "cloudwatch:ListDashboards"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"s3:GetObject", "s3:PutObject"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:s3:::*/*aws-glue-*/*", "arn:aws:s3:::aws-glue-*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"s3:CreateBucket"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:s3:::aws-glue-*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"logs:GetLogEvents"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:logs:*:*:/aws-glue/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"cloudformation:CreateStack", "cloudformation:DeleteStack"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:cloudformation:*:*:stack/aws-glue*/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"sagemaker:CreatePresignedNotebookInstanceUrl", "sagemaker:CreateNotebookInstance", "sagemaker:DeleteNotebookInstance", "sagemaker:DescribeNotebookInstance", "sagemaker:StartNotebookInstance", "sagemaker:StopNotebookInstance", "sagemaker:UpdateNotebookInstance", "sagemaker:ListTags"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:sagemaker:*:*:notebook-instance/aws-glue-*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"sagemaker:DescribeNotebookInstanceLifecycleConfig", "sagemaker:CreateNotebookInstanceLifecycleConfig", "sagemaker:DeleteNotebookInstanceLifecycleConfig", "sagemaker:ListNotebookInstanceLifecycleConfigs"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:sagemaker:*:*:notebook-instance-lifecycle-config/aws-glue-*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"ec2:RunInstances"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ec2:*:*:instance/*", "arn:aws:ec2:*:*:key-pair/*", "arn:aws:ec2:*:*:image/*", "arn:aws:ec2:*:*:security-group/*", "arn:aws:ec2:*:*:network-interface/*", "arn:aws:ec2:*:*:subnet/*", "arn:aws:ec2:*:*:volume/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"ec2:TerminateInstances", "ec2:CreateTags", "ec2:DeleteTags"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ec2:*:*:instance/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"ec2:ResourceTag/aws:cloudformation:logical-id": "ZeppelinInstance"}, "StringLike": policy.Condition{"ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/aws-glue-*/*"}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"tag:GetResources"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"ForAllValues:StringLike": policy.Condition{"aws:TagKeys": []interface{}{"aws-glue-*"}}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"iam:PassRole"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:iam::*:role/AWSGlueServiceRole*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringLike": policy.Condition{"iam:PassedToService": []interface{}{"glue.amazonaws.com"}}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"iam:PassRole"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:iam::*:role/AWSGlueServiceNotebookRole*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringLike": policy.Condition{"iam:PassedToService": []interface{}{"ec2.amazonaws.com"}}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"iam:PassRole"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:iam::*:role/AWSGlueServiceSageMakerNotebookRole*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringLike": policy.Condition{"iam:PassedToService": []interface{}{"sagemaker.amazonaws.com"}}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"iam:PassRole"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:iam::*:role/service-role/AWSGlueServiceRole*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringLike": policy.Condition{"iam:PassedToService": []interface{}{"glue.amazonaws.com"}}}}}}

// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
)

var AWS_MANAGED_POLICY_SageMakerStudioFullAccess = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "AmazonDataZoneStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"datazone:*"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value(nil)}, policy.Statement{Sid: "ReadOnlyStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"kms:DescribeKey", "kms:ListAliases", "iam:ListRoles", "sso:DescribeRegisteredRegions", "s3:ListAllMyBuckets", "redshift:DescribeClusters", "redshift-serverless:ListWorkgroups", "ec2:DescribeSecurityGroups", "ec2:DescribeSubnets", "ec2:DescribeVpcs", "secretsmanager:ListSecrets", "iam:ListUsers", "glue:GetDatabases", "codeconnections:ListConnections", "codeconnections:ListTagsForResource", "codewhisperer:ListProfiles", "bedrock:ListInferenceProfiles", "bedrock:ListFoundationModels", "bedrock:ListTagsForResource", "aoss:ListSecurityPolicies"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value(nil)}, policy.Statement{Sid: "BucketReadOnlyStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"s3:ListBucket", "s3:GetBucketLocation"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:s3:::*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value(nil)}, policy.Statement{Sid: "CreateBucketStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"s3:CreateBucket"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:s3:::amazon-datazone*", "arn:aws:s3:::amazon-sagemaker*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value(nil)}, policy.Statement{Sid: "ConfigureBucketStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"s3:PutBucketCORS", "s3:PutBucketPolicy", "s3:PutBucketVersioning"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:s3:::amazon-sagemaker*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"StringEquals": map[string]policy.Value{"aws:ResourceAccount": policy.Value{"${aws:PrincipalAccount}"}}}}, policy.Statement{Sid: "RamCreateResourceStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"ram:CreateResourceShare"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"StringEqualsIfExists": map[string]policy.Value{"ram:RequestedResourceType": policy.Value{"datazone:Domain"}}}}, policy.Statement{Sid: "RamResourceStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"ram:DeleteResourceShare", "ram:AssociateResourceShare", "ram:DisassociateResourceShare", "ram:RejectResourceShareInvitation"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"StringLike": map[string]policy.Value{"ram:ResourceShareName": policy.Value{"DataZone*"}}}}, policy.Statement{Sid: "RamResourceReadOnlyStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"ram:GetResourceShares", "ram:GetResourceShareInvitations", "ram:GetResourceShareAssociations", "ram:ListResourceSharePermissions"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value(nil)}, policy.Statement{Sid: "IAMPassRoleStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"iam:PassRole"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:iam::*:role/AmazonDataZone*", "arn:aws:iam::*:role/service-role/AmazonDataZone*", "arn:aws:iam::*:role/service-role/AmazonSageMaker*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"StringEquals": map[string]policy.Value{"iam:passedToService": policy.Value{"datazone.amazonaws.com"}}}}, policy.Statement{Sid: "IAMGetPolicyStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"iam:GetPolicy"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:iam::*:policy/service-role/AmazonDataZoneRedshiftAccessPolicy*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value(nil)}, policy.Statement{Sid: "DataZoneTagOnCreateDomainProjectTags", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"secretsmanager:TagResource"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:secretsmanager:*:*:secret:AmazonDataZone-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"ForAllValues:StringEquals": map[string]policy.Value{"aws:TagKeys": policy.Value{"AmazonDataZoneDomain", "AmazonDataZoneProject"}}, "StringLike": map[string]policy.Value{"aws:RequestTag/AmazonDataZoneDomain": policy.Value{"dzd_*"}, "aws:ResourceTag/AmazonDataZoneDomain": policy.Value{"dzd_*"}}}}, policy.Statement{Sid: "DataZoneTagOnCreate", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"secretsmanager:TagResource"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:secretsmanager:*:*:secret:AmazonDataZone-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"ForAllValues:StringEquals": map[string]policy.Value{"aws:TagKeys": policy.Value{"AmazonDataZoneDomain"}}, "StringLike": map[string]policy.Value{"aws:RequestTag/AmazonDataZoneDomain": policy.Value{"dzd_*"}, "aws:ResourceTag/AmazonDataZoneDomain": policy.Value{"dzd_*"}}}}, policy.Statement{Sid: "CreateSecretStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"secretsmanager:CreateSecret"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:secretsmanager:*:*:secret:AmazonDataZone-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"StringLike": map[string]policy.Value{"aws:RequestTag/AmazonDataZoneDomain": policy.Value{"dzd_*"}}}}, policy.Statement{Sid: "ConnectionStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"codeconnections:GetConnection"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:codeconnections:*:*:connection/*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value(nil)}, policy.Statement{Sid: "TagCodeConnectionsStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"codeconnections:TagResource"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:codeconnections:*:*:connection/*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"ForAllValues:StringEquals": map[string]policy.Value{"aws:TagKeys": policy.Value{"for-use-with-all-datazone-projects"}}, "StringEquals": map[string]policy.Value{"aws:RequestTag/for-use-with-all-datazone-projects": policy.Value{"true"}}}}, policy.Statement{Sid: "UntagCodeConnectionsStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"codeconnections:UntagResource"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:codeconnections:*:*:connection/*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"ForAllValues:StringEquals": map[string]policy.Value{"aws:TagKeys": policy.Value{"for-use-with-all-datazone-projects"}}}}, policy.Statement{Sid: "SSMParameterStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"ssm:GetParameter", "ssm:GetParametersByPath", "ssm:PutParameter", "ssm:DeleteParameter"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ssm:*:*:parameter/amazon/datazone/q*", "arn:aws:ssm:*:*:parameter/amazon/datazone/genAI*", "arn:aws:ssm:*:*:parameter/amazon/datazone/profiles*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value(nil)}, policy.Statement{Sid: "UseKMSKeyPermissionsStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"kms:Decrypt"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"Null": map[string]policy.Value{"aws:ResourceTag/EnableKeyForAmazonDataZone": policy.Value{"false"}}, "StringEquals": map[string]policy.Value{"aws:ResourceTag/EnableKeyForAmazonDataZone": policy.Value{"true"}}, "StringLike": map[string]policy.Value{"kms:ViaService": policy.Value{"ssm.*.amazonaws.com"}}}}, policy.Statement{Sid: "SecurityPolicyStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"aoss:GetSecurityPolicy", "aoss:CreateSecurityPolicy"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"StringLike": map[string]policy.Value{"aoss:collection": policy.Value{"bedrock-ide-*"}}}}, policy.Statement{Sid: "GetFoundationModelStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"bedrock:GetFoundationModel", "bedrock:GetFoundationModelAvailability"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:bedrock:*::foundation-model/*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value(nil)}, policy.Statement{Sid: "GetInferenceProfileStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"bedrock:GetInferenceProfile"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:bedrock:*:*:inference-profile/*", "arn:aws:bedrock:*:*:application-inference-profile/*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value(nil)}, policy.Statement{Sid: "ApplicationInferenceProfileStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"bedrock:CreateInferenceProfile"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:bedrock:*:*:application-inference-profile/*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"Null": map[string]policy.Value{"aws:RequestTag/AmazonDataZoneDomain": policy.Value{"false"}, "aws:RequestTag/AmazonDataZoneProject": policy.Value{"true"}}}}, policy.Statement{Sid: "TagApplicationInferenceProfileStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"bedrock:TagResource"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:bedrock:*:*:application-inference-profile/*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"Null": map[string]policy.Value{"aws:RequestTag/AmazonDataZoneDomain": policy.Value{"false"}, "aws:RequestTag/AmazonDataZoneProject": policy.Value{"true"}, "aws:ResourceTag/AmazonDataZoneDomain": policy.Value{"false"}, "aws:ResourceTag/AmazonDataZoneProject": policy.Value{"true"}}}}, policy.Statement{Sid: "DeleteApplicationInferenceProfileStatement", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"bedrock:DeleteInferenceProfile"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:bedrock:*:*:application-inference-profile/*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"Null": map[string]policy.Value{"aws:ResourceTag/AmazonDataZoneDomain": policy.Value{"false"}, "aws:ResourceTag/AmazonDataZoneProject": policy.Value{"true"}}}}}}

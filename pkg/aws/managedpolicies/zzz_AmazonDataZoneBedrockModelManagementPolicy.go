// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
)

var AWS_MANAGED_POLICY_AmazonDataZoneBedrockModelManagementPolicy = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "ManageApplicationInferenceProfile", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"bedrock:CreateInferenceProfile", "bedrock:TagResource"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:bedrock:*:*:application-inference-profile/*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"ForAnyValue:StringEquals": map[string]policy.Value{"aws:TagKeys": policy.Value{"AmazonDataZoneProject"}}, "Null": map[string]policy.Value{"aws:RequestTag/AmazonDataZoneProject": policy.Value{"false"}, "aws:ResourceTag/AmazonDataZoneProject": policy.Value{"false"}}, "StringEquals": map[string]policy.Value{"aws:ResourceAccount": policy.Value{"${aws:PrincipalAccount}"}}}}, policy.Statement{Sid: "DeleteApplicationInferenceProfile", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"bedrock:DeleteInferenceProfile"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:bedrock:*:*:application-inference-profile/*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"Null": map[string]policy.Value{"aws:ResourceTag/AmazonDataZoneProject": policy.Value{"false"}}, "StringEquals": map[string]policy.Value{"aws:ResourceAccount": policy.Value{"${aws:PrincipalAccount}"}}}}, policy.Statement{Sid: "CreateApplicationInferenceProfileUsingFoundationModels", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"bedrock:CreateInferenceProfile"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:bedrock:*::foundation-model/*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value(nil)}, policy.Statement{Sid: "CreateApplicationInferenceProfileUsingBedrockModels", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"bedrock:CreateInferenceProfile"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:bedrock:*:*:inference-profile/*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"StringEquals": map[string]policy.Value{"aws:ResourceAccount": policy.Value{"${aws:PrincipalAccount}"}}}}}}

// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
)

var AWS_MANAGED_POLICY_AmazonCloudWatchEvidentlyServiceRolePolicy = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"appconfig:StartDeployment"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:appconfig:*:*:application/*", "arn:aws:appconfig:*:*:deploymentstrategy/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"aws:RequestTag/DeployedBy": "Evidently"}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Deny", Action: policy.Value{"appconfig:StartDeployment"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:appconfig:*:*:application/*/configurationprofile/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringNotEquals": policy.Condition{"aws:ResourceTag/Owner": "Evidently"}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"appconfig:TagResource"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:appconfig:*:*:application/*/environment/*/deployment/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"aws:RequestTag/DeployedBy": "Evidently"}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"appconfig:StopDeployment"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:appconfig:*:*:application/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Deny", Action: policy.Value{"appconfig:StopDeployment"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:appconfig:*:*:application/*/environment/*/deployment/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringNotEquals": policy.Condition{"aws:ResourceTag/DeployedBy": "Evidently"}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"appconfig:ListDeployments"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:appconfig:*:*:application/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock(nil)}}}

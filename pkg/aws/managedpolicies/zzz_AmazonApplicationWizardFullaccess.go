// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
	"github.com/nsiow/yams/pkg/polystring"
)

var AWS_MANAGED_POLICY_AmazonApplicationWizardFullaccess = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"cloudformation:CreateStack", "cloudformation:DeleteStack", "cloudformation:DescribeStack*", "cloudformation:Get*", "cloudformation:ListStacks", "cloudformation:SignalResource", "ec2:AllocateAddress", "ec2:AllocateHosts", "ec2:AssignPrivateIpAddresses", "ec2:AssociateAddress", "ec2:AssociateDhcpOptions", "ec2:AssociateSubnetCidrBlock", "ec2:AttachInternetGateway", "ec2:AttachNetworkInterface", "ec2:AttachVolume", "ec2:AuthorizeSecurityGroupEgress", "ec2:AuthorizeSecurityGroupIngress", "ec2:CreateDhcpOptions", "ec2:CreateEgressOnlyInternetGateway", "ec2:CreateInternetGateway", "ec2:CreateNatGateway", "ec2:CreateNetworkInterface", "ec2:CreateSecurityGroup", "ec2:CreateVolume", "ec2:CreateVpc", "ec2:CreateVpcEndpoint", "ec2:DeleteDhcpOptions", "ec2:DeleteInternetGateway", "ec2:DeleteKeyPair", "ec2:DeleteNatGateway", "ec2:DeleteSecurityGroup", "ec2:DeleteSnapshot", "ec2:DeleteVolume", "ec2:DeleteVpc", "ec2:DetachInternetGateway", "ec2:DetachVolume", "ec2:DisassociateIamInstanceProfile", "ec2:DisassociateRouteTable", "ec2:DisassociateSubnetCidrBlock", "ec2:GetConsoleOutput", "ec2:GetPasswordData", "ec2:ModifyInstanceAttribute", "ec2:ModifySubnetAttribute", "ec2:ModifyVolumeAttribute", "ec2:ModifyVpcAttribute", "ec2:ReleaseAddress", "ec2:ReplaceRoute", "ec2:ReplaceRouteTableAssociation", "ec2:RevokeSecurityGroupEgress", "ec2:RevokeSecurityGroupIngress", "ec2:RunInstances", "ec2:StartInstances", "ec2:StopInstances", "ec2:TerminateInstances", "ssm:SendCommand"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString{"ForAllValues:StringLike": polystring.PolyString{""}}}}, policy.Statement{Sid: "VisualEditor0", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"iam:CreateInstanceProfile", "iam:DeleteInstanceProfile", "iam:PassRole", "iam:RemoveRoleFromInstanceProfile", "iam:AddRoleToInstanceProfile"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:iam::*:role/service-role/AmazonEC2RoleForApplicationWizard*", "arn:aws:iam::*:instance-profile/ApplicationWizard*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"autoscaling:AttachInstances", "autoscaling:CreateAutoScalingGroup", "autoscaling:CreateLaunchConfiguration", "autoscaling:DeleteAutoScalingGroup", "autoscaling:DeleteLaunchConfiguration", "autoscaling:UpdateAutoScalingGroup", "logs:CreateLogStream", "logs:DeleteLogGroup", "logs:DeleteLogStream", "logs:DescribeLog*", "logs:PutLogEvents", "resource-groups:CreateGroup", "resource-groups:DeleteGroup", "sns:ListSubscriptionsByTopic", "sns:Publish", "ssm:DeleteDocument", "ssm:DeleteParameter*", "ssm:DescribeDocument*", "ssm:GetDocument", "ssm:PutParameter"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:resource-groups:*:*:group/ApplicationWizard*", "arn:aws:sns:*:*:*", "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/ApplicationWizard*", "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/ApplicationWizard*", "arn:aws:ssm:*:*:parameter/ApplicationWizard*", "arn:aws:ssm:*:*:document/ApplicationWizard*", "arn:aws:logs:*:*:log-group:*:*:*", "arn:aws:logs:::log-group:ApplicationWizard*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"logs:DeleteLogStream", "logs:GetLogEvents", "logs:PutLogEvents", "ssm:AddTagsToResource", "ssm:AddTagsToResource", "ssm:DescribeDocument", "ssm:GetDocument", "ssm:ListTagsForResource", "ssm:RemoveTagsFromResource", "ssm:RemoveTagsToResource"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:logs:*:*:log-group:*:*:*", "arn:aws:logs:::log-group:ApplicationWizard*", "arn:aws:ssm:*:*:parameter/ApplicationWizard*", "arn:aws:ssm:*:*:document/ApplicationWizard*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"autoscaling:DescribeAutoScaling*", "autoscaling:DescribeLaunchConfigurations", "autoscaling:DescribeNotificationConfigurations", "autoscaling:DescribePolicies", "autoscaling:DescribeScaling*", "autoscaling:DescribeScheduledActions", "cloudformation:DescribeAccountLimits", "cloudformation:DescribeStackDriftDetectionStatus", "cloudformation:List*", "ds:AddIpRoutes", "ds:CreateComputer", "ds:CreateMicrosoftAD", "ds:DeleteDirectory", "ds:Describe*", "ds:ListAuthorizedApplications", "ec2:AssociateRouteTable", "ec2:AssociateVpcCidrBlock", "ec2:CreateInternetGateway", "ec2:CreateKeyPair", "ec2:CreateNatGateway", "ec2:CreateRoute", "ec2:CreateRouteTable", "ec2:CreateSubnet", "ec2:CreateTags", "ec2:DeleteNetworkAcl", "ec2:DeleteNetworkInterface", "ec2:DeleteNetworkInterfacePermission", "ec2:DeleteRoute", "ec2:DeleteRouteTable", "ec2:DeleteSubnet", "ec2:DeleteTags", "ec2:DescribeAccountAttributes", "ec2:DescribeAddresses", "ec2:DescribeAvailabilityZones", "ec2:DescribeDhcpOptions", "ec2:DescribeEgressOnlyInternetGateways", "ec2:DescribeImage*", "ec2:DescribeInstanceStatus", "ec2:DescribeInstances", "ec2:DescribeInternetGateways", "ec2:DescribeKeyPairs", "ec2:DescribeNatGateways", "ec2:DescribeNetwork*", "ec2:DescribeRegions", "ec2:DescribeRouteTables", "ec2:DescribeSecurityGroups", "ec2:DescribeSnapshot*", "ec2:DescribeSubnets", "ec2:DescribeTags", "ec2:DescribeVolume*", "ec2:DescribeVpc*", "ec2:DetachNetworkInterface", "ec2:DisassociateAddress", "ec2:DisassociateVpcCidrBlock", "ec2:GetLaunchTemplateData", "ec2:ModifyNetworkInterfaceAttribute", "ec2:ModifyVolume", "iam:GetRole", "iam:GetRolePolicy", "iam:List*", "logs:CreateLogGroup", "logs:GetLogDelivery", "logs:GetLogRecord", "logs:ListLogDeliveries", "resource-groups:Get*", "resource-groups:List*", "servicequotas:GetServiceQuota", "servicequotas:ListServiceQuotas", "sns:ListSubscriptions", "sns:ListTopics", "ssm:CreateDocument", "ssm:DescribeAutomation*", "ssm:DescribeInstanceInformation", "ssm:DescribeParameters", "ssm:GetAutomationExecution", "ssm:GetCommandInvocation", "ssm:GetParameter*", "ssm:ListCommand*", "ssm:ListDocument*", "ssm:ListInstanceAssociations", "ssm:SendAutomationSignal", "ssm:StartAutomationExecution", "ssm:StopAutomationExecution", "tag:Get*"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"logs:GetLog*"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:logs:*:*:log-group:*:*:*", "arn:aws:logs:::log-group:ApplicationWizard*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"cloudformation:List*", "cloudformation:Describe*"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:cloudformation:::stack/ApplicationWizard*/"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"iam:CreateServiceLinkedRole"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:iam::*:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"applicationwizard:*"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}}}

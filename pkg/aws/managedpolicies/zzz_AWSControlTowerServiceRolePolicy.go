// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
	"github.com/nsiow/yams/pkg/polystring"
)

var AWS_MANAGED_POLICY_AWSControlTowerServiceRolePolicy = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"cloudformation:CreateStack", "cloudformation:CreateStackInstances", "cloudformation:CreateStackSet", "cloudformation:DeleteStack", "cloudformation:DeleteStackInstances", "cloudformation:DeleteStackSet", "cloudformation:DescribeStackInstance", "cloudformation:DescribeStacks", "cloudformation:DescribeStackSet", "cloudformation:DescribeStackSetOperation", "cloudformation:ListStackInstances", "cloudformation:UpdateStack", "cloudformation:UpdateStackInstances", "cloudformation:UpdateStackSet"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:cloudformation:*:*:type/resource/AWS-IAM-Role"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"cloudformation:CreateStack", "cloudformation:CreateStackInstances", "cloudformation:CreateStackSet", "cloudformation:DeleteStack", "cloudformation:DeleteStackInstances", "cloudformation:DeleteStackSet", "cloudformation:DescribeStackInstance", "cloudformation:DescribeStacks", "cloudformation:DescribeStackSet", "cloudformation:DescribeStackSetOperation", "cloudformation:GetTemplate", "cloudformation:ListStackInstances", "cloudformation:UpdateStack", "cloudformation:UpdateStackInstances", "cloudformation:UpdateStackSet"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:cloudformation:*:*:stack/AWSControlTower*/*", "arn:aws:cloudformation:*:*:stack/StackSet-AWSControlTower*/*", "arn:aws:cloudformation:*:*:stackset/AWSControlTower*:*", "arn:aws:cloudformation:*:*:stackset-target/AWSControlTower*/*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"cloudtrail:CreateTrail", "cloudtrail:DeleteTrail", "cloudtrail:GetTrailStatus", "cloudtrail:StartLogging", "cloudtrail:StopLogging", "cloudtrail:UpdateTrail", "cloudtrail:PutEventSelectors", "logs:CreateLogStream", "logs:PutLogEvents", "logs:PutRetentionPolicy"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:logs:*:*:log-group:aws-controltower/CloudTrailLogs:*", "arn:aws:cloudtrail:*:*:trail/aws-controltower*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"s3:GetObject"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:s3:::aws-controltower*/*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"sts:AssumeRole"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:iam::*:role/AWSControlTowerExecution", "arn:aws:iam::*:role/AWSControlTowerBlueprintAccess"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"cloudtrail:DescribeTrails", "ec2:DescribeAvailabilityZones", "iam:ListRoles", "logs:CreateLogGroup", "logs:DescribeLogGroups", "organizations:CreateAccount", "organizations:DescribeAccount", "organizations:DescribeCreateAccountStatus", "organizations:DescribeOrganization", "organizations:DescribeOrganizationalUnit", "organizations:DescribePolicy", "organizations:ListAccounts", "organizations:ListAccountsForParent", "organizations:ListAWSServiceAccessForOrganization", "organizations:ListChildren", "organizations:ListOrganizationalUnitsForParent", "organizations:ListParents", "organizations:ListPoliciesForTarget", "organizations:ListTargetsForPolicy", "organizations:ListRoots", "organizations:MoveAccount", "servicecatalog:AssociatePrincipalWithPortfolio"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"iam:GetRole", "iam:GetUser", "iam:ListAttachedRolePolicies", "iam:GetRolePolicy"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"iam:PassRole"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:iam::*:role/service-role/AWSControlTowerStackSetRole", "arn:aws:iam::*:role/service-role/AWSControlTowerCloudTrailRole", "arn:aws:iam::*:role/service-role/AWSControlTowerConfigAggregatorRoleForOrganizations"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"config:DeleteConfigurationAggregator", "config:PutConfigurationAggregator", "config:TagResource"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString{"StringEquals": polystring.PolyString{""}}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"organizations:EnableAWSServiceAccess", "organizations:DisableAWSServiceAccess"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString{"StringLike": polystring.PolyString{""}}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"iam:CreateServiceLinkedRole"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString{"StringEquals": polystring.PolyString{""}}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"account:EnableRegion", "account:ListRegions", "account:GetRegionOptStatus"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}}}

// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
)

var AWS_MANAGED_POLICY_AWSBackupOrganizationAdminAccess = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"organizations:DisableAWSServiceAccess", "organizations:EnableAWSServiceAccess", "organizations:ListDelegatedAdministrators"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"StringEquals": map[string]policy.Value{"organizations:ServicePrincipal": policy.Value{"backup.amazonaws.com"}}}}, policy.Statement{Sid: "", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"organizations:RegisterDelegatedAdministrator", "organizations:DeregisterDelegatedAdministrator"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:organizations::*:account/*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"StringEquals": map[string]policy.Value{"organizations:ServicePrincipal": policy.Value{"backup.amazonaws.com"}}}}, policy.Statement{Sid: "", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"organizations:AttachPolicy", "organizations:ListPoliciesForTarget", "organizations:ListTargetsForPolicy", "organizations:DetachPolicy", "organizations:DisablePolicyType", "organizations:DescribePolicy", "organizations:DescribeEffectivePolicy", "organizations:ListPolicies", "organizations:EnablePolicyType", "organizations:CreatePolicy", "organizations:UpdatePolicy", "organizations:DeletePolicy"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"StringLikeIfExists": map[string]policy.Value{"organizations:PolicyType": policy.Value{"BACKUP_POLICY"}}}}, policy.Statement{Sid: "", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"organizations:ListRoots", "organizations:ListParents", "organizations:ListAWSServiceAccessForOrganization", "organizations:ListAccountsForParent", "organizations:ListAccounts", "organizations:DescribeOrganization", "organizations:ListOrganizationalUnitsForParent", "organizations:ListChildren", "organizations:DescribeAccount", "organizations:DescribeOrganizationalUnit"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value(nil)}}}

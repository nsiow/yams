// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
)

var AWS_MANAGED_POLICY_ROSAAmazonEBSCSIDriverOperatorPolicy = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"ec2:DescribeInstances", "ec2:DescribeSnapshots", "ec2:DescribeTags", "ec2:DescribeVolumes", "ec2:DescribeVolumesModifications"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"ec2:AttachVolume", "ec2:DetachVolume"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ec2:*:*:instance/*", "arn:aws:ec2:*:*:volume/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"aws:ResourceTag/red-hat-managed": "true"}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"ec2:DeleteVolume", "ec2:ModifyVolume"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ec2:*:*:volume/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"aws:ResourceTag/red-hat-managed": "true"}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"ec2:CreateVolume"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ec2:*:*:volume/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"aws:RequestTag/red-hat-managed": "true"}}}, policy.Statement{Sid: "CreateSnapshotResourceTag", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"ec2:CreateSnapshot"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ec2:*:*:volume/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"aws:ResourceTag/red-hat-managed": "true"}}}, policy.Statement{Sid: "CreateSnapshotRequestTag", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"ec2:CreateSnapshot"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ec2:*:*:snapshot/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"aws:RequestTag/red-hat-managed": "true"}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"ec2:DeleteSnapshot"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ec2:*:*:snapshot/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"aws:ResourceTag/red-hat-managed": "true"}}}, policy.Statement{Sid: "", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Value{"ec2:CreateTags"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ec2:*:*:volume/*", "arn:aws:ec2:*:*:snapshot/*"}, NotResource: policy.Value(nil), Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"ec2:CreateAction": []interface{}{"CreateVolume", "CreateSnapshot"}}}}}}

// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
	"github.com/nsiow/yams/pkg/polystring"
)

var AWS_MANAGED_POLICY_AWSSSOMasterAccountAdministrator = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "AWSSSOCreateSLR", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"iam:CreateServiceLinkedRole"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString{"StringLike": polystring.PolyString{""}}}}, policy.Statement{Sid: "AWSSSOMasterAccountAdministrator", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"iam:PassRole"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString{"StringLike": polystring.PolyString{""}}}}, policy.Statement{Sid: "AWSSSOMemberAccountAdministrator", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"ds:DescribeTrusts", "ds:UnauthorizeApplication", "ds:DescribeDirectories", "ds:AuthorizeApplication", "iam:ListPolicies", "organizations:EnableAWSServiceAccess", "organizations:ListRoots", "organizations:ListAccounts", "organizations:ListOrganizationalUnitsForParent", "organizations:ListAccountsForParent", "organizations:DescribeOrganization", "organizations:ListChildren", "organizations:DescribeAccount", "organizations:ListParents", "organizations:ListDelegatedAdministrators", "sso:*", "sso-directory:*", "identitystore:*", "identitystore-auth:*", "ds:CreateAlias", "access-analyzer:ValidatePolicy"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString(nil)}}, policy.Statement{Sid: "AWSSSOManageDelegatedAdministrator", Principal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, NotPrincipal: policy.Principal{AWS: polystring.PolyString(nil), Federated: polystring.PolyString(nil), Service: polystring.PolyString(nil), CanonicalUser: polystring.PolyString(nil)}, Action: policy.Action{PolyString: polystring.PolyString{"organizations:RegisterDelegatedAdministrator", "organizations:DeregisterDelegatedAdministrator"}}, NotAction: policy.Action{PolyString: polystring.PolyString(nil)}, Resource: policy.Resource{PolyString: polystring.PolyString{"*"}}, NotResource: policy.Resource{PolyString: polystring.PolyString(nil)}, Condition: policy.Condition{Map: map[string]polystring.PolyString{"StringEquals": polystring.PolyString{""}}}}}}

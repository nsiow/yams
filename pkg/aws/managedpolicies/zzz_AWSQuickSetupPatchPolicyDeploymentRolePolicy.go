// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
)

var AWS_MANAGED_POLICY_AWSQuickSetupPatchPolicyDeploymentRolePolicy = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "CfnRead", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"cloudformation:DescribeStacks", "cloudformation:DescribeStackDriftDetectionStatus", "cloudformation:ListStacks"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value(nil)}, policy.Statement{Sid: "CfnManage", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"cloudformation:CreateStack", "cloudformation:UpdateStack", "cloudformation:DeleteStack", "cloudformation:CreateChangeSet", "cloudformation:DeleteChangeSet", "cloudformation:ExecuteChangeSet", "cloudformation:DescribeChangeSet", "cloudformation:DescribeStackResourceDrifts", "cloudformation:DetectStackDrift", "cloudformation:DetectStackResourceDrift"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:cloudformation:*:*:stack/StackSet-AWS-QuickSetup-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value(nil)}, policy.Statement{Sid: "RGroupsGet", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"resource-groups:GetGroupQuery"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value(nil)}, policy.Statement{Sid: "S3BucketsList", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"s3:ListAllMyBuckets"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value(nil)}, policy.Statement{Sid: "AccessLogsBucketManage", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"s3:CreateBucket", "s3:DeleteBucket", "s3:DeleteBucketPolicy", "s3:Put*", "s3:Get*", "s3:List*"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:s3:::aws-quicksetup-patchpolicy-access-log-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"ForAnyValue:StringEquals": map[string]policy.Value{"aws:CalledVia": policy.Value{"cloudformation.amazonaws.com"}}, "StringEquals": map[string]policy.Value{"aws:ResourceAccount": policy.Value{"${aws:PrincipalAccount}"}}}}, policy.Statement{Sid: "LambdaManage", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"lambda:CreateFunction", "lambda:UpdateFunction*", "lambda:GetFunction", "lambda:ListTags", "lambda:TagResource", "lambda:DeleteFunction", "lambda:InvokeFunction", "lambda:UntagResource"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:lambda:*:*:function:baseline-overrides-*", "arn:aws:lambda:*:*:function:delete-name-tags-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"ForAnyValue:StringEquals": map[string]policy.Value{"aws:CalledVia": policy.Value{"cloudformation.amazonaws.com"}}, "StringEquals": map[string]policy.Value{"aws:ResourceAccount": policy.Value{"${aws:PrincipalAccount}"}}}}, policy.Statement{Sid: "LogGroupsDescribe", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"logs:DescribeLogGroups"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value(nil)}, policy.Statement{Sid: "LogGroupsManage", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"logs:CreateLogGroup", "logs:TagResource", "logs:PutRetentionPolicy", "logs:DeleteLogGroup", "logs:ListTagsForResource", "logs:UntagResource"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:logs:*:*:log-group:/aws/lambda/baseline-overrides-*", "arn:aws:logs:*:*:log-group:/aws/lambda/delete-name-tags-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"ForAnyValue:StringEquals": map[string]policy.Value{"aws:CalledVia": policy.Value{"cloudformation.amazonaws.com"}}}}, policy.Statement{Sid: "QSDocsManage", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"ssm:CreateDocument", "ssm:UpdateDocument", "ssm:DescribeDocument", "ssm:UpdateDocumentDefaultVersion", "ssm:DeleteDocument", "ssm:AddTagsToResource", "ssm:RemoveTagsFromResource", "ssm:ListTagsForResource"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ssm:*:*:document/AWSQuickSetup-*", "arn:aws:ssm:*:*:document/QuickSetup-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"ForAnyValue:StringEquals": map[string]policy.Value{"aws:CalledVia": policy.Value{"cloudformation.amazonaws.com"}}}}, policy.Statement{Sid: "QSDocsGet", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"ssm:GetDocument"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ssm:*:*:document/AWSQuickSetup-*", "arn:aws:ssm:*:*:document/QuickSetup-*", "arn:aws:ssm:*::document/AWS-EnableExplorer", "arn:aws:ssm:*::document/AWS-RunPatchBaseline"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value(nil)}, policy.Statement{Sid: "QSAssociationsManage", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"ssm:CreateAssociation", "ssm:UpdateAssociation", "ssm:DeleteAssociation", "ssm:DescribeAssociation"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:ssm:*:*:document/AWSQuickSetup-*", "arn:aws:ssm:*:*:document/QuickSetup-*", "arn:aws:ssm:*::document/AWS-EnableExplorer", "arn:aws:ssm:*::document/AWS-RunPatchBaseline", "arn:aws:ec2:*:*:instance/*", "arn:aws:ssm:*:*:managed-instance/*", "arn:aws:ssm:*:*:association/*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"ForAnyValue:StringEquals": map[string]policy.Value{"aws:CalledVia": policy.Value{"cloudformation.amazonaws.com"}}}}, policy.Statement{Sid: "SSMSLRCreate", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"iam:CreateServiceLinkedRole"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"StringEquals": map[string]policy.Value{"iam:AWSServiceName": policy.Value{"ssm.amazonaws.com"}}}}, policy.Statement{Sid: "ConfigRoleManage", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"iam:TagRole", "iam:UntagRole", "iam:GetRole", "iam:UpdateRole", "iam:DeleteRole", "iam:GetRolePolicy", "iam:ListAttachedRolePolicies", "iam:ListRolePolicies", "iam:ListRoleTags"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:iam::*:role/AWS-QuickSetup-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"ForAnyValue:StringEquals": map[string]policy.Value{"aws:CalledVia": policy.Value{"cloudformation.amazonaws.com"}}}}, policy.Statement{Sid: "ConfigRolePassToSSM", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"iam:PassRole"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:iam::*:role/AWS-QuickSetup-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"StringEquals": map[string]policy.Value{"iam:PassedToService": policy.Value{"ssm.amazonaws.com"}}}}, policy.Statement{Sid: "ConfigRolePassToLambda", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"iam:PassRole"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:iam::*:role/AWS-QuickSetup-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"StringEquals": map[string]policy.Value{"iam:PassedToService": policy.Value{"lambda.amazonaws.com"}}}}, policy.Statement{Sid: "DocDescribe", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"ssm:DescribeDocument"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value(nil)}, policy.Statement{Sid: "LegacyDocClean", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"ssm:DeleteDocument"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"StringLike": map[string]policy.Value{"aws:ResourceTag/QuickSetupID": policy.Value{"*"}}}}, policy.Statement{Sid: "LegacyIAMClean", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"iam:DeleteRole", "iam:DeleteRolePolicy"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:iam::*:role/*QuickSetup-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"StringLike": map[string]policy.Value{"aws:ResourceTag/QuickSetupID": policy.Value{"*"}}}}, policy.Statement{Sid: "ConfigRoleBoundedManage", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"iam:CreateRole", "iam:AttachRolePolicy", "iam:DeleteRolePolicy", "iam:DetachRolePolicy", "iam:PutRolePolicy", "iam:PutRolePermissionsBoundary"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:iam::*:role/AWS-QuickSetup-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.Value{"ForAnyValue:StringEquals": map[string]policy.Value{"aws:CalledVia": policy.Value{"cloudformation.amazonaws.com"}}, "StringEquals": map[string]policy.Value{"iam:PermissionsBoundary": policy.Value{"arn:aws:iam::aws:policy/AWSQuickSetupPatchPolicyPermissionsBoundary"}}}}}}

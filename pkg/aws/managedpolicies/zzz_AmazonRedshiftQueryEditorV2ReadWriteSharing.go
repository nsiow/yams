// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
)

var AWS_MANAGED_POLICY_AmazonRedshiftQueryEditorV2ReadWriteSharing = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "RedshiftPermissions", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"redshift:DescribeClusters", "redshift-serverless:ListNamespaces", "redshift-serverless:ListWorkgroups"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "SecretsManagerPermissions", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"secretsmanager:CreateSecret", "secretsmanager:GetSecretValue", "secretsmanager:DeleteSecret", "secretsmanager:TagResource"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"arn:aws:secretsmanager:*:*:sqlworkbench!*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"secretsmanager:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"}}}, policy.Statement{Sid: "ResourceGroupsTaggingPermissions", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"tag:GetResources"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"aws:CalledViaLast": "sqlworkbench.amazonaws.com"}}}, policy.Statement{Sid: "AmazonRedshiftQueryEditorV2NonResourceLevelPermissions", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"sqlworkbench:CreateFolder", "sqlworkbench:PutTab", "sqlworkbench:BatchDeleteFolder", "sqlworkbench:DeleteTab", "sqlworkbench:GenerateSession", "sqlworkbench:GetAccountInfo", "sqlworkbench:GetAccountSettings", "sqlworkbench:GetUserInfo", "sqlworkbench:GetUserWorkspaceSettings", "sqlworkbench:PutUserWorkspaceSettings", "sqlworkbench:ListConnections", "sqlworkbench:ListFiles", "sqlworkbench:ListTabs", "sqlworkbench:UpdateFolder", "sqlworkbench:ListRedshiftClusters", "sqlworkbench:DriverExecute", "sqlworkbench:ListTaggedResources", "sqlworkbench:ListQueryExecutionHistory", "sqlworkbench:GetQueryExecutionHistory", "sqlworkbench:ListNotebooks", "sqlworkbench:GetSchemaInference", "sqlworkbench:GetAutocompletionMetadata", "sqlworkbench:GetAutocompletionResource"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock(nil)}, policy.Statement{Sid: "AmazonRedshiftQueryEditorV2CreateOwnedResourcePermissions", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"sqlworkbench:CreateConnection", "sqlworkbench:CreateSavedQuery", "sqlworkbench:CreateChart", "sqlworkbench:CreateNotebook", "sqlworkbench:DuplicateNotebook", "sqlworkbench:CreateNotebookFromVersion", "sqlworkbench:ImportNotebook"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"aws:RequestTag/sqlworkbench-resource-owner": "${aws:userid}"}}}, policy.Statement{Sid: "AmazonRedshiftQueryEditorV2OwnerSpecificPermissions", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"sqlworkbench:DeleteChart", "sqlworkbench:DeleteConnection", "sqlworkbench:DeleteSavedQuery", "sqlworkbench:GetChart", "sqlworkbench:GetConnection", "sqlworkbench:GetSavedQuery", "sqlworkbench:ListSavedQueryVersions", "sqlworkbench:UpdateChart", "sqlworkbench:UpdateConnection", "sqlworkbench:UpdateSavedQuery", "sqlworkbench:AssociateConnectionWithTab", "sqlworkbench:AssociateQueryWithTab", "sqlworkbench:AssociateConnectionWithChart", "sqlworkbench:AssociateNotebookWithTab", "sqlworkbench:UpdateFileFolder", "sqlworkbench:ListTagsForResource", "sqlworkbench:GetNotebook", "sqlworkbench:UpdateNotebook", "sqlworkbench:DeleteNotebook", "sqlworkbench:DuplicateNotebook", "sqlworkbench:CreateNotebookCell", "sqlworkbench:DeleteNotebookCell", "sqlworkbench:UpdateNotebookCellContent", "sqlworkbench:UpdateNotebookCellLayout", "sqlworkbench:BatchGetNotebookCell", "sqlworkbench:ListNotebookVersions", "sqlworkbench:CreateNotebookVersion", "sqlworkbench:GetNotebookVersion", "sqlworkbench:DeleteNotebookVersion", "sqlworkbench:RestoreNotebookVersion", "sqlworkbench:CreateNotebookFromVersion", "sqlworkbench:ExportNotebook", "sqlworkbench:ImportNotebook"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"}}}, policy.Statement{Sid: "AmazonRedshiftQueryEditorV2TagOnlyUserIdPermissions", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"sqlworkbench:TagResource"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"ForAllValues:StringEquals": policy.Condition{"aws:TagKeys": "sqlworkbench-resource-owner"}, "StringEquals": policy.Condition{"aws:RequestTag/sqlworkbench-resource-owner": "${aws:userid}", "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"}}}, policy.Statement{Sid: "AmazonRedshiftQueryEditorV2TeamReadWriteAccessPermissions", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"sqlworkbench:GetChart", "sqlworkbench:GetConnection", "sqlworkbench:GetSavedQuery", "sqlworkbench:ListSavedQueryVersions", "sqlworkbench:ListTagsForResource", "sqlworkbench:UpdateChart", "sqlworkbench:UpdateConnection", "sqlworkbench:UpdateSavedQuery", "sqlworkbench:AssociateConnectionWithTab", "sqlworkbench:AssociateQueryWithTab", "sqlworkbench:AssociateConnectionWithChart", "sqlworkbench:AssociateNotebookWithTab", "sqlworkbench:GetNotebook", "sqlworkbench:DuplicateNotebook", "sqlworkbench:BatchGetNotebookCell", "sqlworkbench:ListNotebookVersions", "sqlworkbench:GetNotebookVersion", "sqlworkbench:CreateNotebookFromVersion", "sqlworkbench:ExportNotebook"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"StringEquals": policy.Condition{"aws:ResourceTag/sqlworkbench-team": "${aws:PrincipalTag/sqlworkbench-team}"}}}, policy.Statement{Sid: "AmazonRedshiftQueryEditorV2TagOnlyTeamPermissions", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"sqlworkbench:TagResource"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"ForAllValues:StringEquals": policy.Condition{"aws:TagKeys": "sqlworkbench-team"}, "StringEquals": policy.Condition{"aws:RequestTag/sqlworkbench-team": "${aws:PrincipalTag/sqlworkbench-team}", "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"}}}, policy.Statement{Sid: "AmazonRedshiftQueryEditorV2UntagOnlyTeamPermissions", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Effect: "Allow", Action: policy.Action{Value: policy.Value{"sqlworkbench:UntagResource"}}, NotAction: policy.Action{Value: policy.Value(nil)}, Resource: policy.Resource{Value: policy.Value{"*"}}, NotResource: policy.Resource{Value: policy.Value(nil)}, Condition: policy.ConditionBlock{"ForAllValues:StringEquals": policy.Condition{"aws:TagKeys": "sqlworkbench-team"}, "StringEquals": policy.Condition{"aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"}}}}}

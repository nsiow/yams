// This file was automatically generated by build tooling; do not edit!

package managedpolicies

import (
	"github.com/nsiow/yams/pkg/policy"
)

var AWS_MANAGED_POLICY_AwsGlueDataBrewFullAccessPolicy = policy.Policy{Version: "2012-10-17", Id: "", Statement: policy.StatementBlock{policy.Statement{Sid: "", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"databrew:CreateDataset", "databrew:DescribeDataset", "databrew:ListDatasets", "databrew:UpdateDataset", "databrew:DeleteDataset", "databrew:CreateProject", "databrew:DescribeProject", "databrew:ListProjects", "databrew:StartProjectSession", "databrew:SendProjectSessionAction", "databrew:UpdateProject", "databrew:DeleteProject", "databrew:CreateRecipe", "databrew:DescribeRecipe", "databrew:ListRecipes", "databrew:ListRecipeVersions", "databrew:PublishRecipe", "databrew:UpdateRecipe", "databrew:BatchDeleteRecipeVersion", "databrew:DeleteRecipeVersion", "databrew:CreateRecipeJob", "databrew:CreateProfileJob", "databrew:DescribeJob", "databrew:DescribeJobRun", "databrew:ListJobRuns", "databrew:ListJobs", "databrew:StartJobRun", "databrew:StopJobRun", "databrew:UpdateProfileJob", "databrew:UpdateRecipeJob", "databrew:DeleteJob", "databrew:CreateSchedule", "databrew:DescribeSchedule", "databrew:ListSchedules", "databrew:UpdateSchedule", "databrew:DeleteSchedule", "databrew:CreateRuleset", "databrew:DeleteRuleset", "databrew:DescribeRuleset", "databrew:ListRulesets", "databrew:UpdateRuleset", "databrew:ListTagsForResource", "databrew:TagResource", "databrew:UntagResource"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue(nil)}, policy.Statement{Sid: "", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"appflow:DescribeFlow", "appflow:DescribeFlowExecutionRecords", "appflow:ListFlows", "glue:GetConnection", "glue:GetConnections", "glue:GetDatabases", "glue:GetPartitions", "glue:GetTable", "glue:GetTables", "glue:GetDataCatalogEncryptionSettings", "dataexchange:ListDataSets", "dataexchange:ListDataSetRevisions", "dataexchange:ListRevisionAssets", "dataexchange:CreateJob", "dataexchange:StartJob", "dataexchange:GetJob", "ec2:DescribeSecurityGroups", "ec2:DescribeVpcs", "ec2:DescribeSubnets", "kms:DescribeKey", "kms:ListKeys", "kms:ListAliases", "redshift:DescribeClusters", "redshift:DescribeClusterSubnetGroups", "redshift-data:DescribeStatement", "redshift-data:ListDatabases", "redshift-data:ListSchemas", "redshift-data:ListTables", "s3:ListAllMyBuckets", "s3:GetBucketCORS", "s3:GetBucketLocation", "s3:GetEncryptionConfiguration", "s3:GetLifecycleConfiguration", "secretsmanager:ListSecrets", "secretsmanager:DescribeSecret", "sts:GetCallerIdentity", "cloudtrail:LookupEvents", "iam:ListRoles", "iam:GetRole"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue(nil)}, policy.Statement{Sid: "", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"glue:CreateConnection"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:glue:*:*:catalog", "arn:aws:glue:*:*:connection/AwsGlueDataBrew-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue(nil)}, policy.Statement{Sid: "", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"glue:GetDatabases"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:glue:*:*:catalog", "arn:aws:glue:*:*:database/*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue(nil)}, policy.Statement{Sid: "", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"glue:CreateTable"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:glue:*:*:catalog", "arn:aws:glue:*:*:database/*", "arn:aws:glue:*:*:table/*/awsgluedatabrew*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue(nil)}, policy.Statement{Sid: "", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"s3:ListBucket", "s3:GetObject"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:s3:::databrew-public-datasets-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue(nil)}, policy.Statement{Sid: "", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"kms:GenerateDataKey"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue{"StringLike": map[string]policy.ConditionValue{"kms:ViaService": "s3.*.amazonaws.com"}}}, policy.Statement{Sid: "", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"secretsmanager:CreateSecret"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:secretsmanager:*:*:secret:AwsGlueDataBrew-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue(nil)}, policy.Statement{Sid: "", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"kms:GenerateRandom"}, NotAction: policy.Value(nil), Resource: policy.Value{"*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue(nil)}, policy.Statement{Sid: "", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"secretsmanager:GetSecretValue"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:secretsmanager:*:*:secret:databrew!default-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue{"ForAnyValue:StringEquals": map[string]policy.ConditionValue{"aws:CalledVia": []interface{}{"databrew.amazonaws.com"}}}}, policy.Statement{Sid: "", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"secretsmanager:CreateSecret"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:secretsmanager:*:*:secret:databrew!default-*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue{"ForAnyValue:StringEquals": map[string]policy.ConditionValue{"aws:CalledVia": []interface{}{"databrew.amazonaws.com"}}, "StringLike": map[string]policy.ConditionValue{"secretsmanager:Name": "databrew!default"}}}, policy.Statement{Sid: "", Effect: "Allow", Principal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, NotPrincipal: policy.Principal{AWS: policy.Value(nil), Federated: policy.Value(nil), Service: policy.Value(nil), CanonicalUser: policy.Value(nil)}, Action: policy.Value{"iam:PassRole"}, NotAction: policy.Value(nil), Resource: policy.Value{"arn:aws:iam::*:role/*"}, NotResource: policy.Value(nil), Condition: map[string]map[string]policy.ConditionValue{"StringEquals": map[string]policy.ConditionValue{"iam:PassedToService": []interface{}{"databrew.amazonaws.com"}}}}}}
